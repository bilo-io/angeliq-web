(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{1117:function(e,t,n){"use strict";n.r(t),n.d(t,"CryptonExplore",(function(){return _}));var a=n(0),r=n.n(a),o=n(6),i=n.n(o),c=n(5),l=n(67),s=n(35),u=(n(1118),n(9)),d=n(1144),p=(n(240),n(172),n(1145)),f=n(1150),m=n(1142);function y(e){return(y="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function h(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if(!(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e)))return;var n=[],a=!0,r=!1,o=void 0;try{for(var i,c=e[Symbol.iterator]();!(a=(i=c.next()).done)&&(n.push(i.value),!t||n.length!==t);a=!0);}catch(e){r=!0,o=e}finally{try{a||null==c.return||c.return()}finally{if(r)throw o}}return n}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function g(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function v(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?g(Object(n),!0).forEach((function(t){b(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):g(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function b(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function E(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function w(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}function O(e,t){return!t||"object"!==y(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function j(e){return(j=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function x(e,t){return(x=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var _=function(e){function t(){var e,n,a;E(this,t);for(var r=arguments.length,o=new Array(r),i=0;i<r;i++)o[i]=arguments[i];return O(a,(n=a=O(this,(e=j(t)).call.apply(e,[this].concat(o))),a.state={currency:"usd",viewType:"tile",isLoading:{ipAddress:!0,countryForIP:!0,cryptoInfo:!0,cryptoIndex:!0,chartData:!0,coins:!0},data:{},charts:{}},a.setChartType=function(e){a.setState({chartType:e.target.value})},a.addCoinToChart=function(e){a.setState({isLoading:v({},a.state.isLoading,{chartData:!0})}),console.log("fetching coin data: ",e.id),Object(p.a)({id:e.id,currency:"usd",days:7}).then((function(t){a.setState({charts:v({},a.state.charts,b({},e.id,t))},(function(){return console.log(a.state.charts)}))})).finally((function(){a.setState({isLoading:v({},a.state.isLoading,{chartData:!1})})}))},a.removeCoinFromChart=function(e){var t=e.id,n=a.state.charts;delete n[t],a.setState({charts:n})},a.onChange=function(e){return function(t){a.setState(b({},e,t.target.value))}},a.filterCoins=function(e){var t,n,r,o=e.target.value,i=null===(t=a.state)||void 0===t?void 0:null===(n=t.data)||void 0===n?void 0:null===(r=n.coins)||void 0===r?void 0:r.filter((function(e){var t;return null==e?void 0:null===(t=e.name)||void 0===t?void 0:t.toLowerCase().includes(o.toLowerCase())}));a.setState({filteredCoins:i})},n))}var n,a,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&x(e,t)}(t,e),n=t,(a=[{key:"componentDidMount",value:function(){this.fetchCryptoInfo()}},{key:"fetchCryptoInfo",value:function(){var e=this;Object(p.d)().then((function(t){e.setState({data:v({},e.state.data,{cryptoExchanges:t})})})).finally((function(){e.setState({isLoading:v({},e.state.isLoading,{cryptoExchanges:!1})})})),Object(p.e)().then((function(t){e.setState({data:v({},e.state.data,{cryptoGlobal:t})})})).finally((function(){e.setState({isLoading:v({},e.state.isLoading,{cryptoGlobal:!1})})})),Object(p.f)().then((function(t){e.setState({data:v({},e.state.data,{cryptoTrending:t})})})).finally((function(){e.setState({isLoading:v({},e.state.isLoading,{cryptoTrending:!1})})})),Object(p.c)().then((function(t){e.setState({data:v({},e.state.data,{cryptoExchangeRates:t})})})).finally((function(){e.setState({isLoading:v({},e.state.isLoading,{cryptoExchangeRates:!1})})})),Object(p.b)().then((function(t){var n=e.state.currency,a=t.sort((function(e,t){var a,r,o,i,c,l,s,u;return(null==e?void 0:null===(a=e.market_data)||void 0===a?void 0:null===(r=a.current_price)||void 0===r?void 0:r[n])>(null==t?void 0:null===(o=t.market_data)||void 0===o?void 0:null===(i=o.current_price)||void 0===i?void 0:i[n])?-1:(null==e?void 0:null===(c=e.market_data)||void 0===c?void 0:null===(l=c.current_price)||void 0===l?void 0:l[n])<(null==t?void 0:null===(s=t.market_data)||void 0===s?void 0:null===(u=s.current_price)||void 0===u?void 0:u[n])?1:0}));e.setState({data:v({},e.state.data,{coins:a}),filteredCoins:a})})).finally((function(){e.setState({isLoading:v({},e.state.isLoading,{coins:!1})})})),Object(p.a)({id:"bitcoin",currency:"usd",days:7}).then((function(t){e.setState({data:v({},e.state.data,{chartData:t})})})).finally((function(){e.setState({isLoading:v({},e.state.isLoading,{chartData:!1})})}))}},{key:"render",value:function(){var e,t=this,n=this.state,a=n.data,o=n.isLoading,c=n.currency,l=n.viewType,s=n.filteredCoins,p=n.charts,m=((a&&(null===(e=a.cryptoExchangeRates)||void 0===e?void 0:e.rates)?Object.keys(null==a?void 0:a.cryptoExchangeRates.rates):[]).map((function(e){return v({id:e,key:e},null==a?void 0:a.cryptoExchangeRates.rates[e])})),Object.keys(p)),y=null==m?void 0:m.map((function(e){return{data:p[e].prices,name:e}}));return r.a.createElement("div",{className:"page dark"},r.a.createElement("div",null,r.a.createElement("div",{className:"page-header padded"},r.a.createElement("h3",null,"Crypton Explore")),r.a.createElement("br",null),r.a.createElement(u.w,{defaultTab:"coins",keys:["coins","exchanges"],coins:r.a.createElement(u.c,{isLoading:o.coins},r.a.createElement(u.c,{isLoading:o.chartData,margin:"13.85rem"},(null==y?void 0:y.length)>0&&r.a.createElement(d.a,{series:y||[],title:"Coins: ".concat(m.toString()),period:{label:"Y"}})),r.a.createElement("div",{className:"flex-col"},r.a.createElement("input",{type:"text",onChange:this.filterCoins,style:{width:"30rem",maxWidth:"calc(100% - 2rem)",margin:"auto",borderRadius:"2rem"}})),r.a.createElement("div",{className:"flex-row flex-wrap centered",style:{}},(s||[]).map((function(e,n){var a=e.market_data.price_change_percentage_24h_in_currency,o=e.market_data.price_change_percentage_1h_in_currency,s=Object.keys(p).includes(e.id);return r.a.createElement("div",{key:"coin-".concat(n),className:"card-1 ".concat("tile"===l?"flex-col":"flex-row"),style:{width:"tile"===l?"16rem":"calc(100% - 1rem)",height:"tile"===l?"12rem":"2rem",margin:"0.5rem",backgroundColor:s?"rgba(0,180,220, 0.3)":"rgba(255, 255, 255, 0.05)",borderRadius:"4px",cursor:"pointer",position:"relative",border:s?"3px solid #00adee":"3px solid transparent"}},r.a.createElement("div",{className:"flex-col",style:{lineHeight:"2rem",background:"linear-gradient(137deg, ".concat(s?"#00adee, purple":"#333, #111",")"),height:"tile"===l?"5rem":"2rem",borderRadius:"4px",margin:"-0px",marginTop:"-1px",marginBottom:"0.5rem",padding:"8px"}},r.a.createElement("div",{className:"flex-row space-between"},r.a.createElement(S,{src:null==e?void 0:e.image.small}),r.a.createElement("div",null,e.name)),r.a.createElement("div",{style:{margin:"auto",fontSize:"1.5rem",lineHeight:"1.5rem"}},r.a.createElement("strong",null,Object(f.a)(c).symbol)," ",e.market_data.current_price[c].toLocaleString())),r.a.createElement("div",{className:"".concat("tile"===l?"flex-row space-evenly":"flex-row")},r.a.createElement(C,{label:"1H",value:o[c]}),r.a.createElement(C,{label:"1D",value:a[c]})),r.a.createElement("div",{style:{marginBottom:"calc(1rem - 1px)"}}),r.a.createElement("div",{className:"flex-row"},r.a.createElement("button",{className:"primary hollow ".concat(s?"error":"success"),style:{flexGrow:1,border:"none"},onClick:function(){s?t.removeCoinFromChart(e):t.addCoinToChart(e)}},r.a.createElement(i.a,{name:s?"minus":"plus"})),r.a.createElement("button",{className:"primary hollow primary",style:{flexGrow:1,border:"none"},onClick:function(){t.props.setCoin(e),t.props.history.push("/app/crypton/explore/".concat(e.id))}},r.a.createElement(i.a,{name:"arrow-right"}))))})))),exchanges:r.a.createElement(u.c,{isLoading:o.cryptoExchanges},r.a.createElement("div",null),r.a.createElement("div",{className:"flex-row flex-wrap"}))})))}}])&&w(n.prototype,a),o&&w(n,o),t}(a.Component),C=function(e){var t=e.label,n=e.value,a=n>=0?"8,238,128":"255,0,10",o="arrow-".concat(n>0?"up":"down"),c=n>0?"+":"-";return r.a.createElement("div",{className:"flex-row space-between",style:{backgroundColor:"rgba(".concat(a,", 0.25)"),color:"rgba(".concat(a,", 1)"),padding:"4px",borderRadius:"4px",margin:"4px",flexGrow:1}},r.a.createElement("div",{className:"flex-row"},r.a.createElement(i.a,{name:o,style:{color:"rgba(".concat(a,", 1)"),marginRight:"0.5rem",marginTop:"3px"}}),r.a.createElement("span",null,c,Math.abs(n).toFixed(3),"%")," "),r.a.createElement("div",null,"(",t,")"))},S=function(e){var t=e.src,n=h(Object(a.useState)("#000"),2),o=n[0],i=(n[1],Object(a.useRef)(null));Object(a.useEffect)((function(){}),[]);return r.a.createElement("div",{style:{borderRadius:"4px",background:"linear-gradient(135deg, ".concat(o,", #333)"),width:"3rem",height:"3rem"}},r.a.createElement("img",{ref:i,src:t,style:{width:"2rem",height:"2rem",marginTop:"0.5rem",marginLeft:"0.5rem"}}))};t.default=Object(l.b)((function(e){return{coins:e.crypton.coins}}),(function(e){return Object(s.b)({setCoin:m.d},e)}))(Object(c.g)(_))},1119:function(e,t,n){"use strict";n.r(t),n.d(t,"CryptonExploreItem",(function(){return j}));var a=n(0),r=n.n(a),o=n(6),i=n.n(o),c=n(5),l=n(67),s=n(35),u=n(9),d=(n(240),n(172),n(1145)),p=n(1144),f=n(1142);function m(e){return(m="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function y(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function h(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?y(Object(n),!0).forEach((function(t){g(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):y(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function g(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function v(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function b(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}function E(e,t){return!t||"object"!==m(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function w(e){return(w=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function O(e,t){return(O=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var j=function(e){function t(){var e,n,a;v(this,t);for(var r=arguments.length,o=new Array(r),i=0;i<r;i++)o[i]=arguments[i];return E(a,(n=a=E(this,(e=w(t)).call.apply(e,[this].concat(o))),a.state={currency:"usd",period:{days:7,label:"W"},isLoading:{ipAddress:!0,countryForIP:!0,cryptoInfo:!0,cryptoIndex:!0,chartData:!0,coin:!0},data:{}},a.setChartType=function(e){a.setState({chartType:e.target.value})},a.fetchCoinRoutine=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"usd",n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"7";a.setState({isLoading:h({},a.state.isLoading,{coin:!0})}),Object(d.b)(e,t,n).then((function(e){a.props.setCoin(e),a.setState({data:h({},a.state.data,{coin:e})})})).finally((function(){a.setState({isLoading:h({},a.state.isLoading,{coin:!1})})}))},a.fetchChartDataRoutine=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"usd",n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{label:"W",days:7};console.log("fetching chart data"),a.setState({period:n}),Object(d.a)({id:e,currency:t,days:n.days}).then((function(e){a.setState({data:h({},a.state.data,{chartData:e})})})).finally((function(){a.setState({isLoading:h({},a.state.isLoading,{chartData:!1})})}))},a.onChange=function(e){},n))}var n,a,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&O(e,t)}(t,e),n=t,(a=[{key:"componentDidMount",value:function(){this.fetchCryptoInfo()}},{key:"fetchCryptoInfo",value:function(){var e=this.props,t=e.coin,n=e.history,a=(null==t?void 0:t.id)||n.location.pathname.split("/").pop();this.fetchCoinRoutine(a),this.fetchChartDataRoutine(a)}},{key:"render",value:function(){var e,t,n,a,o,c,l,s,d=this,f=this.state,m=f.isLoading,y=f.data,g=f.currency,v=f.period,b=this.props.coin;return(y&&(null===(e=y.cryptoExchangeRates)||void 0===e?void 0:e.rates)?Object.keys(null==y?void 0:y.cryptoExchangeRates.rates):[]).map((function(e){return h({id:e,key:e},null==y?void 0:y.cryptoExchangeRates.rates[e])})),(null==y?void 0:null===(t=y.chartData)||void 0===t?void 0:null===(n=t.prices)||void 0===n?void 0:n.length)>0&&(y.chartData.prices,y.chartData.total_volumes,y.chartData.market_caps),r.a.createElement("div",{className:"page dark"},r.a.createElement("div",null,r.a.createElement("div",{className:"page-header padded"},r.a.createElement("h3",null,null==b?void 0:b.name)),r.a.createElement("br",null),r.a.createElement(u.w,{defaultTab:"coins",keys:["coins","exchanges"],coins:r.a.createElement("div",null,r.a.createElement(u.c,{isLoading:m.chartData},r.a.createElement(u.a,{title:"Details"},r.a.createElement(u.c,{isLoading:m.coin},r.a.createElement("div",{dangerouslySetInnerHTML:{__html:null==y?void 0:null===(a=y.coin)||void 0===a?void 0:null===(o=a.description)||void 0===o?void 0:o.en}}))),r.a.createElement(u.a,{title:"Chart",isOpenDefault:!0},r.a.createElement(p.b,{period:v,series:[{data:null===(c=y.chartData)||void 0===c?void 0:c.prices}],title:null==b?void 0:b.name,onChangeRange:function(e){d.fetchChartDataRoutine(null==b?void 0:b.id,g,e)}}),r.a.createElement(p.b,{period:v,series:[{data:null===(l=y.chartData)||void 0===l?void 0:l.total_volumes}],title:"".concat(null==b?void 0:b.name," - Total Volumes"),onChangeRange:function(e){d.fetchChartDataRoutine(null==b?void 0:b.id,g,e)}}),r.a.createElement(p.b,{period:v,series:[{data:null===(s=y.chartData)||void 0===s?void 0:s.market_caps}],title:"".concat(null==b?void 0:b.name," - Market Caps"),onChangeRange:function(e){d.fetchChartDataRoutine(null==b?void 0:b.id,g,e)}}))),r.a.createElement("div",{className:"flex-row flex-wrap centered"},[].map((function(e,t){var n=e.market_data.price_change_percentage_24h_in_currency,a=e.market_data.price_change_percentage_1h_in_currency,o=n[g]>=0?"limegreen":"red",c=a[g]>=0?"limegreen":"red";return r.a.createElement("div",{key:"coin-".concat(t),onClick:function(){return d.props.history.push("/app/crypton/explore/".concat(e.id))},className:"card-1",style:{width:"16rem",height:"12rem",padding:"0.5rem",margin:"0.5rem",borderRadius:"4px",cursor:"pointer",position:"relative",backgroundColor:"rgba(255,255,255, 0.1)"}},r.a.createElement("div",{className:"flex-row space-between"},r.a.createElement("div",null,e.name),r.a.createElement("img",{src:e.image.small})),r.a.createElement("div",{className:"flex-row space-between",style:{backgroundColor:"rgba(".concat(c,", 0.25)"),color:c}},r.a.createElement("div",null,"1H"),r.a.createElement("div",null,r.a.createElement(i.a,{name:"arrow-".concat(a[g]>0?"up":"down"),style:{color1H:c,marginRight:"1rem"}}),r.a.createElement("span",null,a[g],"%"))),r.a.createElement("div",{className:"flex-row space-between",style:{backgroundColor:"rgba(".concat(o,", 0.25)"),color:o}},r.a.createElement("div",null,"24H"),r.a.createElement("div",null,r.a.createElement(i.a,{name:"arrow-".concat(n[g]>0?"up":"down"),style:{color24H:o,marginRight:"1rem"}}),r.a.createElement("span",null,n[g],"%"))),r.a.createElement("div",{style:{position:"absolute",right:"1rem",bottom:"1rem",fontSize:"1.5rem"}},r.a.createElement("strong",null,"(",g.toUpperCase(),")")," ",e.market_data.current_price[g].toLocaleString()))})))),exchanges:r.a.createElement(u.c,{isLoading:m.cryptoExchanges})})))}}])&&b(n.prototype,a),o&&b(n,o),t}(a.Component);t.default=Object(l.b)((function(e){return{coin:e.crypton.coin}}),(function(e){return Object(s.b)({setCoin:f.d},e)}))(Object(c.g)(j))},1142:function(e,t,n){"use strict";n.d(t,"d",(function(){return o})),n.d(t,"a",(function(){return i})),n.d(t,"b",(function(){return c})),n.d(t,"c",(function(){return l}));var a=n(519),r=n(243),o=function(e){return function(t){t({payload:e,type:r.e})}},i=function(e){return function(e){return Object(a.a)({resourceName:"crypton/assets",actionType:r.a})}},c=function(e){return function(e){return Object(a.a)({resourceName:"crypton/assets",actionType:r.b})}},l=function(e){return function(e){return Object(a.a)({resourceName:"crypton/assets",actionType:r.d})}}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,