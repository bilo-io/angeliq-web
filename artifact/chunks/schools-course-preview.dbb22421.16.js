(window.webpackJsonp=window.webpackJsonp||[]).push([[16,15,17],{1098:function(e,t,n){"use strict";n.r(t),n.d(t,"CoursesExplorer",(function(){return s})),n.d(t,"CourseCard",(function(){return m}));var r=n(0),a=n.n(r),o=n(5),l=(n(6),n(245)),i=n(9),c=n(1146);function u(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if(!(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e)))return;var n=[],r=!0,a=!1,o=void 0;try{for(var l,i=e[Symbol.iterator]();!(r=(l=i.next()).done)&&(n.push(l.value),!t||n.length!==t);r=!0);}catch(e){a=!0,o=e}finally{try{r||null==i.return||i.return()}finally{if(a)throw o}}return n}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}var s=function(e){var t=u(Object(r.useState)(!0),2),n=t[0],o=t[1],s=u(Object(r.useState)([]),2),d=s[0],f=s[1],p=u(Object(r.useState)([]),2),y=p[0],v=p[1],b=u(Object(r.useState)(""),2),h=b[0],E=b[1];Object(r.useEffect)((function(){c.a.getCourses().then((function(e){console.log(e.data),o(!1),f(e.data)})),g("")}),[]);var g=function(e){var t=d.filter((function(t){return t.name.toLowerCase().includes(e.toLowerCase())}));E(e),v(t)},w=function(t,n){return function(){console.log("<CoursesExplorer/>.openCourse: ",t),e.history.push("".concat(l.scopeRoot,"/courses/").concat(n))}};return a.a.createElement("div",{className:"page"},a.a.createElement("div",{className:"margined"},a.a.createElement("br",null),a.a.createElement(i.s,{onChange:function(e){console.log("Course Search ",e.target.value),g(e.target.value)}}),a.a.createElement("br",null),!n&&a.a.createElement("div",{className:"category-picker"},[{label:"All"},{label:"Science"},{label:"Programming"},{label:"Design"}].map((function(e,t){return a.a.createElement("div",{key:t,className:"item"},e.label)}))),n?a.a.createElement("div",{className:"loader"}):a.a.createElement("div",{className:"flex-row flex-wrap"},(0===h.length?d:y).map((function(e,t){return a.a.createElement(m,{key:t,course:e,index:t,onClick:w(e,t)})})))))},m=function(e){var t=e.course,n=e.onClick;return a.a.createElement("div",{className:"course-card",onClick:n},a.a.createElement("img",{src:t.thumbnail}),a.a.createElement("div",{className:"title"},t.name),a.a.createElement("div",{className:"content"},t.description),a.a.createElement("div",{className:"flex-row space-between padded",style:{position:"absolute",bottom:"0rem"}},a.a.createElement("div",null,t.difficulty),a.a.createElement("div",null,t.duration,"min")))};t.default=Object(o.g)(s)},1099:function(e,t,n){"use strict";n.r(t),n.d(t,"CourseViewer",(function(){return d})),n.d(t,"CourseOutline",(function(){return f}));var r=n(0),a=n.n(r),o=(n(6),n(9));function l(e){return(l="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function c(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function u(e,t){return!t||"object"!==l(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function s(e){return(s=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function m(e,t){return(m=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var d=function(e){function t(){var e,n,r;i(this,t);for(var a=arguments.length,o=new Array(a),l=0;l<a;l++)o[l]=arguments[l];return u(r,(n=r=u(this,(e=s(t)).call.apply(e,[this].concat(o))),r.state={course:{lessons:[{duration:120,name:"Intro to Web Dev",type:"markdown",data:"#The beginning"},{duration:120,name:"Intro to Web Dev - Quiz",type:"testing:quiz",data:[]},{duration:300,name:"Overview",type:"video",data:"http://youtube.com"},{duration:120,name:"Overview - Quiz",type:"testing:quiz",data:[]},{duration:120,name:"Frontend development 101",type:"video",data:[]},{duration:300,name:"Frontend development 101 - Test",type:"testing:test",data:[]},{duration:600,name:"Backend development 101",type:"video",data:[]},{duration:300,name:"Backend development 101 - Test",type:"testing:test",data:[]},{duration:240,name:"Conclusion",type:"markdown",data:"#The end"}]}},r.setChartType=function(e){r.setState({chartType:e.target.value})},r.onChange=function(e){},n))}var n,r,l;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&m(e,t)}(t,e),n=t,(r=[{key:"componentDidMount",value:function(){}},{key:"render",value:function(){var e=this.state.course;return a.a.createElement("div",{className:"page"},a.a.createElement(o.o,{rightDiv:a.a.createElement("div",null,a.a.createElement("h1",null,"Course Viewer"),a.a.createElement("br",null),a.a.createElement("p",null,"TODO: This is where the course content will be displayed",a.a.createElement("ul",null,a.a.createElement("li",null,"Videos"),a.a.createElement("li",null,"Interactive (CodeAcademy style)"),a.a.createElement("li",null,"Markdown"),a.a.createElement("li",null,"...etc.")))),leftDiv:a.a.createElement("div",null,a.a.createElement("div",{className:"divider horizontal"}),a.a.createElement(f,{course:e}))}))}}])&&c(n.prototype,r),l&&c(n,l),t}(r.Component),f=function(e){return(e.course.lessons||[]).map((function(e,t){return a.a.createElement("div",{key:t,className:"course-lesson flex-row space-between"},a.a.createElement("div",{className:"flex-row"},a.a.createElement("div",{className:"flex-col"},a.a.createElement("div",{style:{marginLeft:"1rem",marginRight:"1rem",width:"1px",height:"1.75rem",backgroundColor:"#00adee"}}),a.a.createElement("div",{className:"circle ".concat(e.isComplete?"filled":"")}),a.a.createElement("div",{style:{marginLeft:"1rem",marginRight:"1rem",width:"1px",height:"1.75rem",backgroundColor:"#00adee"}})),a.a.createElement("div",{className:"title"},e.name)),a.a.createElement("div",{className:"duration"},e.duration))}))};t.default=d},1104:function(e,t,n){"use strict";n.r(t),n.d(t,"CoursePreview",(function(){return h}));var r=n(0),a=n.n(r),o=n(5),l=n(6),i=n.n(l),c=n(9),u=n(1146),s=n(1099),m=n(1098);function d(e){return(d="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function f(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function p(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function y(e,t){return!t||"object"!==d(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function v(e){return(v=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function b(e,t){return(b=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var h=function(e){function t(){var e,n,r;f(this,t);for(var a=arguments.length,o=new Array(a),l=0;l<a;l++)o[l]=arguments[l];return y(r,(n=r=y(this,(e=v(t)).call.apply(e,[this].concat(o))),r.state={isLoading:!0,courses:[]},r.setChartType=function(e){r.setState({chartType:e.target.value})},r.onChange=function(e){},r.startCourse=function(){r.props.history.push("".concat(r.props.history.location,"/view"))},r.enrollInCourse=function(){var e=r.props,t=e.location,n=e.history;console.log({location:t,history:n})},n))}var n,r,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&b(e,t)}(t,e),n=t,(r=[{key:"componentDidMount",value:function(){var e=this;u.a.getCourses().then((function(t){console.log(t.data),e.setState({isLoading:!1,courses:t.data})}))}},{key:"render",value:function(){var e=this.state,t=e.courses,n=e.isLoading,r=t[window.location.pathname.split("/").pop()]||{};return a.a.createElement("div",{className:"page course-preview"},n?a.a.createElement("div",{className:"loader"}):a.a.createElement("div",null,a.a.createElement("div",{className:"header",style:{backgroundImage:"url(".concat(r.thumbnail,")")}},a.a.createElement("div",{className:"flex-row space-between"},a.a.createElement("div",null,a.a.createElement("div",{className:"title"},r.name),a.a.createElement("br",null),a.a.createElement("div",{className:"description"},r.description)))),a.a.createElement("div",{className:"divider horizontal"}),a.a.createElement("div",{className:"actions"},a.a.createElement("button",{className:"success rounded hollow wide",onClick:this.enrollInCourse,style:{paddingLeft:"2rem",paddingRight:"2rem"}},a.a.createElement(i.a,{name:"plus"}),"  Enroll"),a.a.createElement("button",{className:"primary rounded hollow extra-wide",onClick:this.startCourse,style:{paddingLeft:"2rem",paddingRight:"2rem"}},"Start  ",a.a.createElement(i.a,{name:"play"}))),a.a.createElement("div",null,a.a.createElement("div",{className:"divider horizontal"}),a.a.createElement(c.a,{title:"Syllabus",isOpenDefault:!0},a.a.createElement(s.CourseOutline,{course:r})),a.a.createElement("div",{className:"divider horizontal"}),a.a.createElement(c.a,{title:"Recommended",className:"flex-row flex-wrap",isOpenDefault:!0},t.slice(0,5).map((function(e,t){return a.a.createElement(m.CourseCard,{course:e,key:t})}))),a.a.createElement("div",{className:"divider horizontal"}))))}}])&&p(n.prototype,r),o&&p(n,o),t}(r.Component);t.default=Object(o.g)(h)},1146:function(e,t,n){"use strict";var r=n(25),a=n.n(r);t.a={getCourses:function(){return a()({method:"GET",url:"".concat("http://localhost:3020/api","/schools/courses")})}}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvYXBwcy9zY2hvb2xzL2NvdXJzZXMvZXhwbG9yZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2FwcHMvc2Nob29scy9jb3Vyc2VzL3ZpZXdlci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvYXBwcy9zY2hvb2xzL2NvdXJzZXMvcHJldmlldy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvYXBwcy9zY2hvb2xzL3NlcnZpY2UuanMiXSwibmFtZXMiOlsiQ291cnNlc0V4cGxvcmVyIiwicHJvcHMiLCJ1c2VTdGF0ZSIsImlzTG9hZGluZyIsInNldElzTG9hZGluZyIsImNvdXJzZXMiLCJzZXRDb3Vyc2VzIiwiZmlsdGVyZWRDb3Vyc2VzIiwic2V0RmlsdGVyZWRDb3Vyc2VzIiwicXVlcnkiLCJzZXRRdWVyeSIsInVzZUVmZmVjdCIsInNlcnZpY2UiLCJnZXRDb3Vyc2VzIiwidGhlbiIsInJlc3BvbnNlIiwiY29uc29sZSIsImxvZyIsImRhdGEiLCJmaWx0ZXJDb3Vyc2VzIiwiZmlsdGVyIiwiY291cnNlIiwibmFtZSIsInRvTG93ZXJDYXNlIiwiaW5jbHVkZXMiLCJvcGVuQ291cnNlIiwiaW5kZXgiLCJoaXN0b3J5IiwicHVzaCIsInNjb3BlUm9vdCIsImNsYXNzTmFtZSIsIm9uQ2hhbmdlIiwiZSIsInRhcmdldCIsInZhbHVlIiwibGFiZWwiLCJtYXAiLCJjYXRlZ29yeSIsImkiLCJrZXkiLCJsZW5ndGgiLCJDb3Vyc2VDYXJkIiwib25DbGljayIsInNyYyIsInRodW1ibmFpbCIsImRlc2NyaXB0aW9uIiwic3R5bGUiLCJwb3NpdGlvbiIsImJvdHRvbSIsImRpZmZpY3VsdHkiLCJkdXJhdGlvbiIsIndpdGhSb3V0ZXIiLCJDb3Vyc2VWaWV3ZXIiLCJzdGF0ZSIsImxlc3NvbnMiLCJ0eXBlIiwic2V0Q2hhcnRUeXBlIiwic2V0U3RhdGUiLCJjaGFydFR5cGUiLCJ0aGlzIiwicmlnaHREaXYiLCJsZWZ0RGl2IiwiQ291cnNlT3V0bGluZSIsIkNvbXBvbmVudCIsImxlc3NvbiIsIm1hcmdpbkxlZnQiLCJtYXJnaW5SaWdodCIsIndpZHRoIiwiaGVpZ2h0IiwiYmFja2dyb3VuZENvbG9yIiwiaXNDb21wbGV0ZSIsIkNvdXJzZVByZXZpZXciLCJzdGFydENvdXJzZSIsImxvY2F0aW9uIiwiZW5yb2xsSW5Db3Vyc2UiLCJ3aW5kb3ciLCJwYXRobmFtZSIsInNwbGl0IiwicG9wIiwiYmFja2dyb3VuZEltYWdlIiwicGFkZGluZ0xlZnQiLCJwYWRkaW5nUmlnaHQiLCJ0aXRsZSIsImlzT3BlbkRlZmF1bHQiLCJzbGljZSIsImF4aW9zIiwibWV0aG9kIiwidXJsIl0sIm1hcHBpbmdzIjoic3ZCQW9CTyxJQUFNQSxFQUFrQixTQUFDQyxHQUFVLFFBRUpDLG9CQUFTLEdBRkwsR0FFL0JDLEVBRitCLEtBRXBCQyxFQUZvQixTQUdSRixtQkFBUyxJQUhELEdBRy9CRyxFQUgrQixLQUd0QkMsRUFIc0IsU0FJUUosbUJBQVMsSUFKakIsR0FJL0JLLEVBSitCLEtBSWRDLEVBSmMsU0FLWk4sbUJBQVMsSUFMRyxHQUsvQk8sRUFMK0IsS0FLeEJDLEVBTHdCLEtBU3RDQyxxQkFBVSxXQUVOQyxJQUFRQyxhQUNIQyxNQUFLLFNBQUFDLEdBQ0ZDLFFBQVFDLElBQUlGLEVBQVNHLE1BQ3JCZCxHQUFhLEdBQ2JFLEVBQVdTLEVBQVNHLFNBRTVCQyxFQUFjLE1BQ2YsSUFJSCxJQUtNQSxFQUFnQixTQUFBVixHQUNsQixJQUFNRixFQUFrQkYsRUFBUWUsUUFBTyxTQUFBQyxHQUFNLE9BQUlBLEVBQU9DLEtBQUtDLGNBQWNDLFNBQVNmLEVBQU1jLGtCQUMxRmIsRUFBU0QsR0FDVEQsRUFBbUJELElBR2pCa0IsRUFBYSxTQUFDSixFQUFRSyxHQUFULE9BQW1CLFdBQ2xDVixRQUFRQyxJQUFJLGtDQUFtQ0ksR0FDL0NwQixFQUFNMEIsUUFBUUMsS0FBZCxVQUFzQkMsWUFBdEIsb0JBQTJDSCxNQUsvQyxPQUFPLHlCQUFLSSxVQUFVLFFBQ2xCLHlCQUFLQSxVQUFVLFlBQ1gsNkJB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LDZCQUNFLHlCQUFLQSxVQUFVLFNBQVNnQixNQUFPLENBQUVpQyxnQkFBaUIsT0FBRixPQUFTMUQsRUFBT3VCLFVBQWhCLE9BQzVDLHlCQUFLZCxVQUFVLDBCQUNYLDZCQUNJLHlCQUFLQSxVQUFVLFNBQVVULEVBQU9DLE1BQ2hDLDZCQUNBLHlCQUFLUSxVQUFVLGVBQWdCVCxFQUFPd0IsZ0JBS2xELHlCQUFLZixVQUFVLHVCQUNmLHlCQUFLQSxVQUFVLFdBQ1gsNEJBQ0lBLFVBQVUsOEJBQ1ZZLFFBQVVpQixLQUFLZSxlQUNmNUIsTUFBTyxDQUFFa0MsWUFBYSxPQUFRQyxhQUFjLFNBQzVDLGtCQUFDLElBQUQsQ0FBUTNELEtBQUssU0FKakIsWUFLQSw0QkFDSVEsVUFBVSxvQ0FDVlksUUFBVWlCLEtBQUthLFlBQ2YxQixNQUFPLENBQUVrQyxZQUFhLE9BQVFDLGFBQWMsU0FIaEQsVUFLSSxrQkFBQyxJQUFELENBQVEzRCxLQUFLLFdBR3JCLDZCQUNJLHlCQUFLUSxVQUFVLHVCQUNmLGtCQUFDLElBQUQsQ0FBV29ELE1BQU0sV0FBV0MsZUFBYSxHQUNyQyxrQkFBQyxnQkFBRCxDQUFlOUQsT0FBU0EsS0FFNUIseUJBQUtTLFVBQVUsdUJBQ2Ysa0JBQUMsSUFBRCxDQUFXb0QsTUFBTSxjQUFjcEQsVUFBVSxxQkFBcUJxRCxlQUFhLEdBQ3JFOUUsRUFBUStFLE1BQU0sRUFBRyxHQUFHaEQsS0FBSSxTQUFDZixFQUFRaUIsR0FBVCxPQUFlLGtCQUFDLGFBQUQsQ0FBWWpCLE9BQVNBLEVBQVNrQixJQUFNRCxRQUVqRix5QkFBS1IsVUFBVSwrQiwyQkFuRjNDLEdBQW1DaUMsYUEyRnBCWixzQkFBV29CLEksa0NDbEcxQixxQkFTZSxLQUNYMUQsV0FSc0IsV0FDdEIsT0FBT3dFLElBQU0sQ0FDVEMsT0FBUSxNQUNSQyxJQUFLLEdBQUYsT0FKUSw0QkFJUiIsImZpbGUiOiJjaHVua3Mvc2Nob29scy1jb3Vyc2UtcHJldmlldy5kYmIyMjQyMS4xNi5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vICNyZWdpb24gTW9kdWxlc1xuaW1wb3J0IFJlYWN0LCB7XG4gICAgdXNlU3RhdGUsXG4gICAgdXNlRWZmZWN0XG59IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHsgd2l0aFJvdXRlciB9IGZyb20gJ3JlYWN0LXJvdXRlcidcbmltcG9ydCBGQUljb24gZnJvbSAncmVhY3QtZm9udGF3ZXNvbWUnXG5pbXBvcnQgeyBzY29wZVJvb3QgfSBmcm9tICcuLi9yb3V0ZXInXG5pbXBvcnQge1xuICAgIEFjY29yZGlvbixcbiAgICBDYXJkLFxuICAgIElucHV0LFxuICAgIFF1ZXJ5QnVpbGRlclxufSBmcm9tICdjb21wb25lbnRzJ1xuLy8gI2VuZHJlZ2lvblxuXG4vLyAjcmVnaW9uIE1pc2NcbmltcG9ydCBzZXJ2aWNlIGZyb20gJy4uL3NlcnZpY2UnXG4vLyAjZW5kcmVnaW9uXG5cbmV4cG9ydCBjb25zdCBDb3Vyc2VzRXhwbG9yZXIgPSAocHJvcHMpID0+IHtcbiAgICAvLyAjcmVnaW9uIFNUQVRFXG4gICAgY29uc3QgW2lzTG9hZGluZywgc2V0SXNMb2FkaW5nXSA9IHVzZVN0YXRlKHRydWUpXG4gICAgY29uc3QgW2NvdXJzZXMsIHNldENvdXJzZXNdID0gdXNlU3RhdGUoW10pXG4gICAgY29uc3QgW2ZpbHRlcmVkQ291cnNlcywgc2V0RmlsdGVyZWRDb3Vyc2VzXSA9IHVzZVN0YXRlKFtdKVxuICAgIGNvbnN0IFtxdWVyeSwgc2V0UXVlcnldID0gdXNlU3RhdGUoJycpXG4gICAgLy8gI2VuZHJlZ2lvblxuXG4gICAgLy8gI3JlZ2lvbiBMSUZFQ1lDTEVcbiAgICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgICAvLyBUT0RPOiByZWR1eFxuICAgICAgICBzZXJ2aWNlLmdldENvdXJzZXMoKVxuICAgICAgICAgICAgLnRoZW4ocmVzcG9uc2UgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKHJlc3BvbnNlLmRhdGEpXG4gICAgICAgICAgICAgICAgc2V0SXNMb2FkaW5nKGZhbHNlKVxuICAgICAgICAgICAgICAgIHNldENvdXJzZXMocmVzcG9uc2UuZGF0YSlcbiAgICAgICAgICAgIH0pXG4gICAgICAgIGZpbHRlckNvdXJzZXMoJycpXG4gICAgfSwgW10pXG4gICAgLy8gI2VuZHJlZ2lvblxuXG4gICAgLy8gI3JlZ2lvbiBNSVNDXG4gICAgY29uc3Qgb25DaGFuZ2UgPSBlID0+IHtcbiAgICAgICAgY29uc29sZS5sb2coJ0NvdXJzZSBTZWFyY2ggJywgZS50YXJnZXQudmFsdWUpXG4gICAgICAgIGZpbHRlckNvdXJzZXMoZS50YXJnZXQudmFsdWUpXG4gICAgfVxuXG4gICAgY29uc3QgZmlsdGVyQ291cnNlcyA9IHF1ZXJ5ID0+IHtcbiAgICAgICAgY29uc3QgZmlsdGVyZWRDb3Vyc2VzID0gY291cnNlcy5maWx0ZXIoY291cnNlID0+IGNvdXJzZS5uYW1lLnRvTG93ZXJDYXNlKCkuaW5jbHVkZXMocXVlcnkudG9Mb3dlckNhc2UoKSkpXG4gICAgICAgIHNldFF1ZXJ5KHF1ZXJ5KVxuICAgICAgICBzZXRGaWx0ZXJlZENvdXJzZXMoZmlsdGVyZWRDb3Vyc2VzKVxuICAgIH1cblxuICAgIGNvbnN0IG9wZW5Db3Vyc2UgPSAoY291cnNlLCBpbmRleCkgPT4gKCkgPT4ge1xuICAgICAgICBjb25zb2xlLmxvZygnPENvdXJzZXNFeHBsb3Jlci8+Lm9wZW5Db3Vyc2U6ICcsIGNvdXJzZSlcbiAgICAgICAgcHJvcHMuaGlzdG9yeS5wdXNoKGAke3Njb3BlUm9vdH0vY291cnNlcy8ke2luZGV4fWApXG4gICAgfVxuICAgIC8vICNlbmRyZWdpb25cblxuICAgIC8vICNyZWdpb24gUkVOREVSXG4gICAgcmV0dXJuIDxkaXYgY2xhc3NOYW1lPSdwYWdlJz5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9J21hcmdpbmVkJz5cbiAgICAgICAgICAgIDxiciAvPlxuICAgICAgICAgICAgPFF1ZXJ5QnVpbGRlclxuICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXsgb25DaGFuZ2UgfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDxiciAvPlxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICFpc0xvYWRpbmcgJiYgPGRpdiBjbGFzc05hbWU9J2NhdGVnb3J5LXBpY2tlcic+XG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7IGxhYmVsOiAnQWxsJyB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsgbGFiZWw6ICdTY2llbmNlJyB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsgbGFiZWw6ICdQcm9ncmFtbWluZycgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7IGxhYmVsOiAnRGVzaWduJyB9XG4gICAgICAgICAgICAgICAgICAgICAgICBdLm1hcCgoY2F0ZWdvcnksIGkpID0+IChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGtleT17IGkgfSBjbGFzc05hbWU9J2l0ZW0nPnsgY2F0ZWdvcnkubGFiZWwgfTwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgKSlcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgfVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGlzTG9hZGluZ1xuICAgICAgICAgICAgICAgICAgICA/IDxkaXYgY2xhc3NOYW1lPSdsb2FkZXInIC8+XG4gICAgICAgICAgICAgICAgICAgIDogPGRpdiBjbGFzc05hbWU9J2ZsZXgtcm93IGZsZXgtd3JhcCc+XG4gICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKHF1ZXJ5Lmxlbmd0aCA9PT0gMFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IGNvdXJzZXNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBmaWx0ZXJlZENvdXJzZXMpLm1hcCgoY291cnNlLCBpKSA9PiAoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxDb3Vyc2VDYXJkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBrZXk9eyBpIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvdXJzZT17IGNvdXJzZSB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmRleD17IGkgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DbGljaz17IG9wZW5Db3Vyc2UoY291cnNlLCBpKSB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICB9XG4gICAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICAgIC8vICNlbmRyZWdpb25cbn1cblxuZXhwb3J0IGNvbnN0IENvdXJzZUNhcmQgPSAoeyBjb3Vyc2UsIG9uQ2xpY2sgfSkgPT4gKFxuICAgIDxkaXYgY2xhc3NOYW1lPSdjb3Vyc2UtY2FyZCcgb25DbGljaz17IG9uQ2xpY2sgfT5cbiAgICAgICAgPGltZyBzcmM9eyBjb3Vyc2UudGh1bWJuYWlsIH0gLz5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9J3RpdGxlJz5cbiAgICAgICAgICAgIHsgY291cnNlLm5hbWUgfVxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9J2NvbnRlbnQnPlxuICAgICAgICAgICAgeyBjb3Vyc2UuZGVzY3JpcHRpb24gfVxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9J2ZsZXgtcm93IHNwYWNlLWJldHdlZW4gcGFkZGVkJyBzdHlsZT17eyBwb3NpdGlvbjogJ2Fic29sdXRlJywgYm90dG9tOiAnMHJlbScgfX0+XG4gICAgICAgICAgICA8ZGl2PnsgY291cnNlLmRpZmZpY3VsdHkgfTwvZGl2PlxuICAgICAgICAgICAgPGRpdj57IGNvdXJzZS5kdXJhdGlvbiB9bWluPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuKVxuXG5leHBvcnQgZGVmYXVsdCB3aXRoUm91dGVyKENvdXJzZXNFeHBsb3JlcilcbiIsImltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tICdyZWFjdCdcbmltcG9ydCBGQUljb24gZnJvbSAncmVhY3QtZm9udGF3ZXNvbWUnXG5pbXBvcnQgeyBDb2RlLCBNYXJrZG93biwgTGF5b3V0LCBKc29uSW5wdXQsIFRhYnMgfSBmcm9tICdjb21wb25lbnRzJ1xuXG5leHBvcnQgY2xhc3MgQ291cnNlVmlld2VyIGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgICBzdGF0ZSA9IHtcbiAgICAgICAgY291cnNlOiB7XG4gICAgICAgICAgICBsZXNzb25zOiBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBkdXJhdGlvbjogMTIwLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiAnSW50cm8gdG8gV2ViIERldicsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6ICdtYXJrZG93bicsXG4gICAgICAgICAgICAgICAgICAgIGRhdGE6ICcjVGhlIGJlZ2lubmluZydcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgZHVyYXRpb246IDEyMCxcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogJ0ludHJvIHRvIFdlYiBEZXYgLSBRdWl6JyxcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogJ3Rlc3Rpbmc6cXVpeicsXG4gICAgICAgICAgICAgICAgICAgIGRhdGE6IFtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGFycmF5IG9mIHF1ZXN0aW9ucywgd2l0aCBwb3NzaWJsZSBhbnN3ZXJzXG4gICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgZHVyYXRpb246IDMwMCxcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogJ092ZXJ2aWV3JyxcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogJ3ZpZGVvJyxcbiAgICAgICAgICAgICAgICAgICAgZGF0YTogJ2h0dHA6Ly95b3V0dWJlLmNvbSdcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgZHVyYXRpb246IDEyMCxcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogJ092ZXJ2aWV3IC0gUXVpeicsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6ICd0ZXN0aW5nOnF1aXonLFxuICAgICAgICAgICAgICAgICAgICBkYXRhOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBhcnJheSBvZiBxdWVzdGlvbnMsIHdpdGggcG9zc2libGUgYW5zd2Vyc1xuICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGR1cmF0aW9uOiAxMjAsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6ICdGcm9udGVuZCBkZXZlbG9wbWVudCAxMDEnLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiAndmlkZW8nLFxuICAgICAgICAgICAgICAgICAgICBkYXRhOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBhcnJheSBvZiBxdWVzdGlvbnMsIHdpdGggcG9zc2libGUgYW5zd2Vyc1xuICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGR1cmF0aW9uOiAzMDAsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6ICdGcm9udGVuZCBkZXZlbG9wbWVudCAxMDEgLSBUZXN0JyxcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogJ3Rlc3Rpbmc6dGVzdCcsXG4gICAgICAgICAgICAgICAgICAgIGRhdGE6IFtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGFycmF5IG9mIHF1ZXN0aW9ucywgd2l0aCBwb3NzaWJsZSBhbnN3ZXJzXG4gICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgZHVyYXRpb246IDYwMCxcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogJ0JhY2tlbmQgZGV2ZWxvcG1lbnQgMTAxJyxcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogJ3ZpZGVvJyxcbiAgICAgICAgICAgICAgICAgICAgZGF0YTogW1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gYXJyYXkgb2YgcXVlc3Rpb25zLCB3aXRoIHBvc3NpYmxlIGFuc3dlcnNcbiAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBkdXJhdGlvbjogMzAwLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiAnQmFja2VuZCBkZXZlbG9wbWVudCAxMDEgLSBUZXN0JyxcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogJ3Rlc3Rpbmc6dGVzdCcsXG4gICAgICAgICAgICAgICAgICAgIGRhdGE6IFtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGFycmF5IG9mIHF1ZXN0aW9ucywgd2l0aCBwb3NzaWJsZSBhbnN3ZXJzXG4gICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgZHVyYXRpb246IDI0MCxcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogJ0NvbmNsdXNpb24nLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiAnbWFya2Rvd24nLFxuICAgICAgICAgICAgICAgICAgICBkYXRhOiAnI1RoZSBlbmQnXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgXVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgc2V0Q2hhcnRUeXBlID0gZSA9PiB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgY2hhcnRUeXBlOiBlLnRhcmdldC52YWx1ZVxuICAgICAgICB9KVxuICAgIH1cblxuICAgIGNvbXBvbmVudERpZE1vdW50ICgpIHtcbiAgICB9XG5cbiAgICBvbkNoYW5nZSA9IGUgPT4ge1xuICAgIH1cblxuICAgIHJlbmRlciAoKSB7XG4gICAgICAgIGNvbnN0IHsgY291cnNlIH0gPSB0aGlzLnN0YXRlXG4gICAgICAgIHJldHVybiA8ZGl2IGNsYXNzTmFtZT0ncGFnZSc+XG4gICAgICAgICAgICA8TGF5b3V0XG4gICAgICAgICAgICAgICAgcmlnaHREaXY9eyA8ZGl2PlxuICAgICAgICAgICAgICAgICAgICA8aDE+Q291cnNlIFZpZXdlcjwvaDE+XG4gICAgICAgICAgICAgICAgICAgIDxiciAvPlxuICAgICAgICAgICAgICAgICAgICA8cD5cbiAgICAgICAgICAgICAgICAgICAgICAgIFRPRE86IFRoaXMgaXMgd2hlcmUgdGhlIGNvdXJzZSBjb250ZW50IHdpbGwgYmUgZGlzcGxheWVkXG4gICAgICAgICAgICAgICAgICAgICAgICA8dWw+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlZpZGVvczwvbGk+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPkludGVyYWN0aXZlIChDb2RlQWNhZGVteSBzdHlsZSk8L2xpPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5NYXJrZG93bjwvbGk+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPi4uLmV0Yy48L2xpPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC91bD5cbiAgICAgICAgICAgICAgICAgICAgPC9wPlxuICAgICAgICAgICAgICAgIDwvZGl2PiB9XG4gICAgICAgICAgICAgICAgbGVmdERpdj17XG4gICAgICAgICAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0nZGl2aWRlciBob3Jpem9udGFsJy8+XG4gICAgICAgICAgICAgICAgICAgICAgICA8Q291cnNlT3V0bGluZSBjb3Vyc2U9eyBjb3Vyc2UgfSAvPlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAvPlxuICAgICAgICA8L2Rpdj5cbiAgICB9XG59XG5cbmV4cG9ydCBjb25zdCBDb3Vyc2VPdXRsaW5lID0gKHsgY291cnNlIH0pID0+IChcbiAgICAoY291cnNlLmxlc3NvbnMgfHwgW10pLm1hcCgobGVzc29uLCBpKSA9PiAoXG4gICAgICAgIDxkaXYga2V5PXsgaSB9IGNsYXNzTmFtZT0nY291cnNlLWxlc3NvbiBmbGV4LXJvdyBzcGFjZS1iZXR3ZWVuJz5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPSdmbGV4LXJvdyc+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9J2ZsZXgtY29sJz5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBzdHlsZT17eyBtYXJnaW5MZWZ0OiAnMXJlbScsIG1hcmdpblJpZ2h0OiAnMXJlbScsIHdpZHRoOiAnMXB4JywgaGVpZ2h0OiAnMS43NXJlbScsIGJhY2tncm91bmRDb2xvcjogJyMwMGFkZWUnIH19IC8+XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtgY2lyY2xlICR7bGVzc29uLmlzQ29tcGxldGUgPyAnZmlsbGVkJyA6ICcnfWB9IC8+XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgc3R5bGU9e3sgbWFyZ2luTGVmdDogJzFyZW0nLCBtYXJnaW5SaWdodDogJzFyZW0nLCB3aWR0aDogJzFweCcsIGhlaWdodDogJzEuNzVyZW0nLCBiYWNrZ3JvdW5kQ29sb3I6ICcjMDBhZGVlJyB9fSAvPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPSd0aXRsZSc+eyBsZXNzb24ubmFtZSB9PC9kaXY+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXsnZHVyYXRpb24nfT57IGxlc3Nvbi5kdXJhdGlvbiB9PC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICkpXG4pXG5cbmV4cG9ydCBkZWZhdWx0IENvdXJzZVZpZXdlclxuIiwiaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHsgd2l0aFJvdXRlciB9IGZyb20gJ3JlYWN0LXJvdXRlcidcbmltcG9ydCBGQUljb24gZnJvbSAncmVhY3QtZm9udGF3ZXNvbWUnXG5pbXBvcnQgeyBBY2NvcmRpb24gfSBmcm9tICdjb21wb25lbnRzJ1xuaW1wb3J0IHNlcnZpY2UgZnJvbSAnLi4vc2VydmljZSdcbmltcG9ydCB7IENvdXJzZU91dGxpbmUgfSBmcm9tICcuL3ZpZXdlcidcbmltcG9ydCB7IENvdXJzZUNhcmQgfSBmcm9tICcuL2V4cGxvcmVyJ1xuXG5leHBvcnQgY2xhc3MgQ291cnNlUHJldmlldyBleHRlbmRzIENvbXBvbmVudCB7XG4gICAgc3RhdGUgPSB7XG4gICAgICAgIGlzTG9hZGluZzogdHJ1ZSxcbiAgICAgICAgY291cnNlczogW11cbiAgICB9XG5cbiAgICBzZXRDaGFydFR5cGUgPSBlID0+IHtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICBjaGFydFR5cGU6IGUudGFyZ2V0LnZhbHVlXG4gICAgICAgIH0pXG4gICAgfVxuXG4gICAgY29tcG9uZW50RGlkTW91bnQgKCkge1xuICAgICAgICBzZXJ2aWNlLmdldENvdXJzZXMoKVxuICAgICAgICAgICAgLnRoZW4ocmVzcG9uc2UgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKHJlc3BvbnNlLmRhdGEpXG4gICAgICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICAgICAgICAgIGlzTG9hZGluZzogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIGNvdXJzZXM6IHJlc3BvbnNlLmRhdGFcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfSlcbiAgICB9XG5cbiAgICBvbkNoYW5nZSA9IGUgPT4ge1xuICAgIH1cblxuICAgIHN0YXJ0Q291cnNlID0gKCkgPT4ge1xuICAgICAgICB0aGlzLnByb3BzLmhpc3RvcnkucHVzaChgJHt0aGlzLnByb3BzLmhpc3RvcnkubG9jYXRpb259L3ZpZXdgKVxuICAgIH1cblxuICAgIGVucm9sbEluQ291cnNlID0gKCkgPT4ge1xuICAgICAgICBjb25zdCB7IGxvY2F0aW9uLCBoaXN0b3J5IH0gPSB0aGlzLnByb3BzXG5cbiAgICAgICAgY29uc29sZS5sb2coe1xuICAgICAgICAgICAgbG9jYXRpb24sXG4gICAgICAgICAgICBoaXN0b3J5XG4gICAgICAgIH0pXG4gICAgfVxuXG4gICAgcmVuZGVyICgpIHtcbiAgICAgICAgY29uc3QgeyBjb3Vyc2VzLCBpc0xvYWRpbmcgfSA9IHRoaXMuc3RhdGVcbiAgICAgICAgY29uc3QgaWQgPSB3aW5kb3cubG9jYXRpb24ucGF0aG5hbWUuc3BsaXQoJy8nKS5wb3AoKVxuICAgICAgICBjb25zdCBjb3Vyc2UgPSBjb3Vyc2VzW2lkXSB8fCB7fVxuXG4gICAgICAgIHJldHVybiA8ZGl2IGNsYXNzTmFtZT0ncGFnZSBjb3Vyc2UtcHJldmlldyc+XG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaXNMb2FkaW5nXG4gICAgICAgICAgICAgICAgICAgID8gPGRpdiBjbGFzc05hbWU9J2xvYWRlcicgLz5cbiAgICAgICAgICAgICAgICAgICAgOiA8ZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9J2hlYWRlcicgc3R5bGU9e3sgYmFja2dyb3VuZEltYWdlOiBgdXJsKCR7Y291cnNlLnRodW1ibmFpbH0pYCB9fT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0nZmxleC1yb3cgc3BhY2UtYmV0d2Vlbic+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0ndGl0bGUnPnsgY291cnNlLm5hbWUgfTwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJyIC8+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0nZGVzY3JpcHRpb24nPnsgY291cnNlLmRlc2NyaXB0aW9uIH08L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsvKiA8aW1nIHNyYz17IGNvdXJzZS50aHVtYm5haWwgfSAvPiAqL31cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9J2RpdmlkZXIgaG9yaXpvbnRhbCcgLz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPSdhY3Rpb25zJz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT0nc3VjY2VzcyByb3VuZGVkIGhvbGxvdyB3aWRlJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXsgdGhpcy5lbnJvbGxJbkNvdXJzZSB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPXt7IHBhZGRpbmdMZWZ0OiAnMnJlbScsIHBhZGRpbmdSaWdodDogJzJyZW0nIH19PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8RkFJY29uIG5hbWU9J3BsdXMnIC8+Jm5ic3A7Jm5ic3A7RW5yb2xsPC9idXR0b24+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9J3ByaW1hcnkgcm91bmRlZCBob2xsb3cgZXh0cmEtd2lkZSdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DbGljaz17IHRoaXMuc3RhcnRDb3Vyc2UgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT17eyBwYWRkaW5nTGVmdDogJzJyZW0nLCBwYWRkaW5nUmlnaHQ6ICcycmVtJyB9fT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBTdGFydCZuYnNwOyZuYnNwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8RkFJY29uIG5hbWU9J3BsYXknIC8+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9J2RpdmlkZXIgaG9yaXpvbnRhbCcgLz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8QWNjb3JkaW9uIHRpdGxlPSdTeWxsYWJ1cycgaXNPcGVuRGVmYXVsdD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPENvdXJzZU91dGxpbmUgY291cnNlPXsgY291cnNlIH0gLz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L0FjY29yZGlvbj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0nZGl2aWRlciBob3Jpem9udGFsJyAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxBY2NvcmRpb24gdGl0bGU9J1JlY29tbWVuZGVkJyBjbGFzc05hbWU9J2ZsZXgtcm93IGZsZXgtd3JhcCcgaXNPcGVuRGVmYXVsdD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeyBjb3Vyc2VzLnNsaWNlKDAsIDUpLm1hcCgoY291cnNlLCBpKSA9PiA8Q291cnNlQ2FyZCBjb3Vyc2U9eyBjb3Vyc2UgfSBrZXk9eyBpIH0gLz4pIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L0FjY29yZGlvbj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0nZGl2aWRlciBob3Jpem9udGFsJyAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgfVxuICAgICAgICA8L2Rpdj5cbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IHdpdGhSb3V0ZXIoQ291cnNlUHJldmlldylcbiIsIlxuaW1wb3J0IGF4aW9zIGZyb20gJ2F4aW9zJ1xuY29uc3QgYmFzZUFwaVVybCA9ICdodHRwOi8vbG9jYWxob3N0OjMwMjAvYXBpJ1xuZXhwb3J0IGNvbnN0IGdldENvdXJzZXMgPSAoKSA9PiB7XG4gICAgcmV0dXJuIGF4aW9zKHtcbiAgICAgICAgbWV0aG9kOiAnR0VUJyxcbiAgICAgICAgdXJsOiBgJHtiYXNlQXBpVXJsfS9zY2hvb2xzL2NvdXJzZXNgXG4gICAgfSlcbn1cblxuZXhwb3J0IGRlZmF1bHQge1xuICAgIGdldENvdXJzZXNcbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=