(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{1116:function(e,t,n){"use strict";n.r(t),n.d(t,"CryptonDashboard",(function(){return w}));var r=n(0),a=n.n(r),o=(n(6),n(5)),c=n(67),i=n(35),u=n(9),l=n(1144),s=(n(240),n(172)),d=n(1145);function f(e){return(f="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function p(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function y(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?p(Object(n),!0).forEach((function(t){b(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):p(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function b(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function m(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function h(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function v(e,t){return!t||"object"!==f(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function g(e){return(g=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function O(e,t){return(O=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var w=function(e){function t(){var e,n,r;m(this,t);for(var a=arguments.length,o=new Array(a),c=0;c<a;c++)o[c]=arguments[c];return v(r,(n=r=v(this,(e=g(t)).call.apply(e,[this].concat(o))),r.state={isLoading:{ipAddress:!0,countryForIP:!0,cryptoInfo:!0,cryptoIndex:!0,chartData:!0,cryptoCoins:!0},data:{}},r.setChartType=function(e){r.setState({chartType:e.target.value})},r.fetchLocationInfo=function(){Object(s.b)().then((function(e){var t=e.ip;r.setState({data:y({},r.state.data,{ipAddress:t})}),Object(s.a)(t).then((function(e){r.setState({data:y({},r.state.data,{country:e})})})).catch((function(e){console.log(e)})).finally((function(){r.setState({isLoading:y({},r.state.isLoading,{countryForIP:!1})})}))})).catch((function(e){console.log(e)})).finally((function(){r.setState({isLoading:y({},r.state.isLoading,{ipAddress:!1})})}))},r.onChange=function(e){},n))}var n,r,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&O(e,t)}(t,e),n=t,(r=[{key:"componentDidMount",value:function(){this.fetchLocationInfo(),this.fetchCryptoInfo()}},{key:"fetchCryptoInfo",value:function(){var e=this;Object(d.d)().then((function(t){e.setState({data:y({},e.state.data,{cryptoExchanges:t})})})).finally((function(){e.setState({isLoading:y({},e.state.isLoading,{cryptoExchanges:!1})})})),Object(d.e)().then((function(t){e.setState({data:y({},e.state.data,{cryptoGlobal:t})})})).finally((function(){e.setState({isLoading:y({},e.state.isLoading,{cryptoGlobal:!1})})})),Object(d.f)().then((function(t){e.setState({data:y({},e.state.data,{cryptoTrending:t})})})).finally((function(){e.setState({isLoading:y({},e.state.isLoading,{cryptoTrending:!1})})})),Object(d.c)().then((function(t){e.setState({data:y({},e.state.data,{cryptoExchangeRates:t})})})).finally((function(){e.setState({isLoading:y({},e.state.isLoading,{cryptoExchangeRates:!1})})})),Object(d.a)({id:"bitcoin",currency:"usd",days:7}).then((function(t){e.setState({data:y({},e.state.data,{chartData:t})})})).finally((function(){e.setState({isLoading:y({},e.state.isLoading,{chartData:!1})})}))}},{key:"render",value:function(){var e,t,n,r,o,c,i,s=this.state,d=s.isLoading,f=s.data,p=((f&&(null===(e=f.cryptoExchangeRates)||void 0===e?void 0:e.rates)?Object.keys(null==f?void 0:f.cryptoExchangeRates.rates):[]).map((function(e){return y({id:e,key:e},null==f?void 0:f.cryptoExchangeRates.rates[e])})),(null==f?void 0:null===(t=f.chartData)||void 0===t?void 0:null===(n=t.prices)||void 0===n?void 0:n.length)>0?f.chartData.prices.map((function(e){return[new Date(e[0]),e[1]]})):[1,2,3]);return a.a.createElement("div",{className:"page dark"},a.a.createElement("div",null,a.a.createElement("h1",null,"Crypton Dashboard"),a.a.createElement(u.c,{isLoading:d.ipAddress},a.a.createElement("div",{className:"card flex-row space-between",style:{padding:"1rem",borderRadius:"6px",border:"1px solid rgba(grey, 0.5)"}},a.a.createElement("div",null,"IP: ",a.a.createElement("strong",null,f.ipAddress)),a.a.createElement(u.c,{isLoading:d.country},a.a.createElement("div",{className:"flex-row space-between"},a.a.createElement("div",null,null===(r=f.country)||void 0===r?void 0:r.countryName),a.a.createElement("div",null,"(",null===(o=f.country)||void 0===o?void 0:o.countryCode,")"),a.a.createElement("div",null,null===(c=f.country)||void 0===c?void 0:c.countryEmoji)))),a.a.createElement(u.c,{isLoading:d.chartData},a.a.createElement(l.a,{data:p||[]}))),a.a.createElement(u.c,{isLoading:d.cryptoExchanges},a.a.createElement("div",null,"CryptoExchanges: ",a.a.createElement("strong",null,a.a.createElement("pre",null,JSON.stringify(f.cryptoExchanges,void 0,2)))),a.a.createElement("div",{className:"flex-row flex-wrap"},null==f?void 0:null===(i=f.cryptoExchanges)||void 0===i?void 0:i.map((function(e,t){return a.a.createElement("div",{key:"cryptoCurrency-".concat(t),className:"card padded",style:{border:"1px solid rgba(grey, 0.5)",width:"16rem",height:"8rem",margin:"0.5rem",overflow:"hidden"}},a.a.createElement("div",{className:"flex-row space-between"},a.a.createElement("img",{style:{width:"4rem",height:"auto"},src:e.image}),a.a.createElement("div",null,e.name)),a.a.createElement("br",null),a.a.createElement("div",{className:"flex-row"}),a.a.createElement("div",null,e.country),a.a.createElement("div",null,e.trade_volume_24h_btc),a.a.createElement("div",null,e.trade_volume_24h_btc_normalized),a.a.createElement("div",null,e.trust_score),a.a.createElement("div",null,e.country),a.a.createElement("a",{href:e.url,target:"_blank"},e.url),a.a.createElement("div",null,"Established: ",e.year_established))}))))))}}])&&h(n.prototype,r),o&&h(n,o),t}(r.Component);t.default=Object(c.b)((function(e){return{}}),(function(e){return Object(i.b)({},e)}))(Object(o.g)(w))},1144:function(e,t,n){"use strict";n.d(t,"a",(function(){return g}));var r=n(0),a=n.n(r),o=n(520),c=n.n(o),i=n(1100),u=n.n(i),l=n(1148),s=n.n(l),d=n(9);function f(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function p(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?f(Object(n),!0).forEach((function(t){y(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):f(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function y(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function b(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if(!(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e)))return;var n=[],r=!0,a=!1,o=void 0;try{for(var c,i=e[Symbol.iterator]();!(r=(c=i.next()).done)&&(n.push(c.value),!t||n.length!==t);r=!0);}catch(e){a=!0,o=e}finally{try{r||null==i.return||i.return()}finally{if(a)throw o}}return n}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}c.a.theme=s.a,c.a.setOptions(c.a.theme);var m=[{label:"H",days:0,date:new Date-36e5},{label:"D",days:1,date:new Date-864e5},{label:"W",days:7,date:new Date-6048e5},{label:"M",days:30,date:new Date-2592e6},{label:"Y",days:365,date:new Date-31536e6}],h=function(e){if(0===e)return.25;if(e<=1)return 1;var t=m.findIndex((function(t){return t.days===e}));return 24*m[t-1].days},v={title:{text:"CryptonChart"},theme:{},tickInterval:36e5*h(1),series:["1","2","3"],xAxis:[{type:"datetime",crosshair:!0,tickInterval:36e5*h(1)}]},g=function(e){var t=e.data,n=e.series,o=e.title,i=e.period,l=e.isLoading,s=b(Object(r.useState)(p({},v)),2),f=s[0],y=s[1];Object(r.useEffect)((function(){y(p({},v,{series:n,title:{text:o}}))}),[t,n]);return a.a.createElement("div",{className:"card",style:{width:"calc(100% - 2rem)",margin:"1rem",borderRadius:"8px"}},a.a.createElement("div",{className:"flex-row"},(m||[]).map((function(t,n){return a.a.createElement("button",{key:n,className:"hollow ".concat(i.label===t.label?"primary":""),onClick:function(){return function(t){var n;null===(n=e.onChangeRange)||void 0===n||n.call(e,t),y(p({},f,{xAxis:[{type:"datetime",crosshair:!0,tickInterval:36e5*h(t.days)}]}))}(t)}},(null==t?void 0:t.label)||"X")}))),a.a.createElement(d.c,{isLoading:l},a.a.createElement(u.a,{highcharts:c.a,options:f})))};t.b=g},1145:function(e,t,n){"use strict";n.d(t,"e",(function(){return i})),n.d(t,"f",(function(){return u})),n.d(t,"c",(function(){return l})),n.d(t,"d",(function(){return s})),n.d(t,"a",(function(){return d})),n.d(t,"b",(function(){return p}));var r=n(219);function a(e,t,n,r,a,o,c){try{var i=e[o](c),u=i.value}catch(e){return void n(e)}i.done?t(u):Promise.resolve(u).then(r,a)}function o(e){return function(){var t=this,n=arguments;return new Promise((function(r,o){var c=e.apply(t,n);function i(e){a(c,r,o,i,u,"next",e)}function u(e){a(c,r,o,i,u,"throw",e)}i(void 0)}))}}var c="https://api.coingecko.com/api/v3",i=function(){var e=o(regeneratorRuntime.mark((function e(){var t;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t="".concat(c,"/global"),e.next=3,Object(r.a)(t);case 3:return e.abrupt("return",e.sent);case 4:case"end":return e.stop()}}),e)})));return function(){return e.apply(this,arguments)}}(),u=function(){var e=o(regeneratorRuntime.mark((function e(){var t;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t="".concat(c,"/search/trending"),e.next=3,Object(r.a)(t);case 3:return e.abrupt("return",e.sent);case 4:case"end":return e.stop()}}),e)})));return function(){return e.apply(this,arguments)}}(),l=function(){var e=o(regeneratorRuntime.mark((function e(){var t;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t="".concat(c,"/exchange_rates"),e.next=3,Object(r.a)(t);case 3:return e.abrupt("return",e.sent);case 4:case"end":return e.stop()}}),e)})));return function(){return e.apply(this,arguments)}}(),s=function(){var e=o(regeneratorRuntime.mark((function e(){var t,n,a=arguments;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t=a.length>0&&void 0!==a[0]?a[0]:"",n="".concat(c,"/exchanges").concat((null==t?void 0:t.length)>0?"/".concat(t):""),e.next=4,Object(r.a)(n);case 4:return e.abrupt("return",e.sent);case 5:case"end":return e.stop()}}),e)})));return function(){return e.apply(this,arguments)}}(),d=function(){var e=o(regeneratorRuntime.mark((function e(t){var n,a,o,i;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return n=t.id,a=t.currency,o=t.days,i="".concat(c,"/coins/").concat(n,"/market_chart?vs_currency=").concat(a,"&days=").concat(o),e.next=4,Object(r.a)(i);case 4:return e.abrupt("return",e.sent);case 5:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}(),f=function(){var e=o(regeneratorRuntime.mark((function e(){var t,n,a=arguments;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t=a.length>0&&void 0!==a[0]?a[0]:"bitcoin",n="".concat(c,"/coins/").concat(t,"/history?date=","01-01-2020"),e.next=4,Object(r.a)(n);case 4:return e.abrupt("return",e.sent);case 5:case"end":return e.stop()}}),e)})));return function(){return e.apply(this,arguments)}}(),p=function(){var e=o(regeneratorRuntime.mark((function e(){var t,n,a=arguments;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t=a.length>0&&void 0!==a[0]?a[0]:"",n="".concat(c,"/coins").concat((null==t?void 0:t.length)>0?"/".concat(t):""),e.next=4,Object(r.a)(n);case 4:return e.abrupt("return",e.sent);case 5:case"end":return e.stop()}}),e)})));return function(){return e.apply(this,arguments)}}();console.log(f("bitcoin"))},1148:function(e,t){e.exports={colors:["#00adee","#2980b9","#2ecc71","#3499ad","#2c3e50","#03aedd"],chart:{backgroundColor:"#1D1D1D",style:{fontFamily:"Roboto",color:"#666666"}},title:{align:"left",style:{fontFamily:"Roboto Condensed",fontWeight:"bold"}},subtitle:{align:"left",style:{fontFamily:"Roboto Condensed"}},legend:{align:"right",verticalAlign:"bottom",itemStyle:{color:"#424242"}},xAxis:{gridLineColor:"#424242",gridLineWidth:1,minorGridLineColor:"#424242",minoGridLineWidth:.5,tickColor:"#424242",minorTickColor:"#424242",lineColor:"#424242"},yAxis:{gridLineColor:"#424242",ridLineWidth:1,minorGridLineColor:"#424242",inoGridLineWidth:.5,tickColor:"#424242",minorTickColor:"#424242",lineColor:"#424242"},plotOptions:{line:{marker:{enabled:!1}},spline:{marker:{enabled:!1}},area:{marker:{enabled:!1}},areaspline:{marker:{enabled:!1}},arearange:{marker:{enabled:!1}},bubble:{maxSize:"10%"}}}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,