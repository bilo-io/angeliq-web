(window.webpackJsonp=window.webpackJsonp||[]).push([[32],{1165:function(e,t,n){"use strict";n.r(t),n.d(t,"Dashboard",(function(){return s}));var r=n(0),a=n.n(r),l=n(6),o=n.n(l),u=n(9),c=n(244);function i(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if(!(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e)))return;var n=[],r=!0,a=!1,l=void 0;try{for(var o,u=e[Symbol.iterator]();!(r=(o=u.next()).done)&&(n.push(o.value),!t||n.length!==t);r=!0);}catch(e){a=!0,l=e}finally{try{r||null==u.return||u.return()}finally{if(a)throw l}}return n}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}var s=function(e){var t=i(Object(r.useState)(!1),2),n=t[0],l=t[1],s=i(Object(r.useState)([{type:"widget:weather",layout:{x:0,y:0,w:12,h:14}},{type:"widget:news",layout:{x:12,y:0,w:24,h:28}},{type:"widget:youtube",layout:{x:0,y:14,w:12,h:14}}]),2),m=s[0];s[1];return Object(r.useEffect)((function(){}),[]),a.a.createElement("div",{className:"page"},a.a.createElement("br",null),a.a.createElement("h1",null,"  Statum"),a.a.createElement("hr",{style:{marginBottom:0}}),m.length>=0?a.a.createElement(c.a,{isExportable:!0,items:m,options:{}}):a.a.createElement("div",{className:"centered",style:{width:"50%",margin:"auto",textAlign:"center"}},a.a.createElement("br",null),a.a.createElement("br",null),"Welcome to Statum! Please add a tile to your dashboard.",a.a.createElement("br",null),a.a.createElement("br",null),a.a.createElement("button",{className:"big-round",onClick:function(){return l(!0)}},a.a.createElement(o.a,{name:"plus"}))),a.a.createElement(u.q,{isOpen:n,onClose:function(){return l(!1)}},a.a.createElement("h1",null,"Hello")))};t.default=s}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvYXBwcy9zdGF0dW0vZGFzaGJvYXJkL2luZGV4LmpzIl0sIm5hbWVzIjpbIkRhc2hib2FyZCIsInByb3BzIiwidXNlU3RhdGUiLCJpc0FkZE1vZGFsT3BlbiIsInNldElzQWRkTW9kYWxPcGVuIiwidHlwZSIsImxheW91dCIsIngiLCJ5IiwidyIsImgiLCJ0aWxlcyIsInVzZUVmZmVjdCIsImNsYXNzTmFtZSIsInN0eWxlIiwibWFyZ2luQm90dG9tIiwibGVuZ3RoIiwiaXNFeHBvcnRhYmxlIiwiaXRlbXMiLCJvcHRpb25zIiwid2lkdGgiLCJtYXJnaW4iLCJ0ZXh0QWxpZ24iLCJvbkNsaWNrIiwibmFtZSIsImlzT3BlbiIsIm9uQ2xvc2UiXSwibWFwcGluZ3MiOiJ1ckJBb0JPLElBQU1BLEVBQVksU0FBQ0MsR0FBVSxRQUVZQyxvQkFBUyxHQUZyQixHQUV6QkMsRUFGeUIsS0FFVEMsRUFGUyxTQUdORixtQkFBUyxDQUMvQixDQUNJRyxLQUFNLGlCQUNOQyxPQUFRLENBQ0pDLEVBQUcsRUFBR0MsRUFBRyxFQUFHQyxFQUFHLEdBQUlDLEVBQUcsS0FHOUIsQ0FDSUwsS0FBTSxjQUNOQyxPQUFRLENBQ0pDLEVBQUcsR0FBSUMsRUFBRyxFQUFHQyxFQUFHLEdBQUlDLEVBQUcsS0FHL0IsQ0FDSUwsS0FBTSxpQkFJTkMsT0FBUSxDQUNKQyxFQUFHLEVBQUdDLEVBQUcsR0FBSUMsRUFBRyxHQUFJQyxFQUFHLE9BdEJILEdBR3pCQyxFQUh5QixVQXNDaEMsT0FSQUMscUJBQVUsY0FDUCxJQVFDLHlCQUFLQyxVQUFVLFFBQ1gsNkJBQ0Esd0NBQ0Esd0JBQUlDLE1BQU8sQ0FBRUMsYUFBYyxLQUV2QkosRUFBTUssUUFBVSxFQUNWLGtCQUFDLElBQUQsQ0FDRUMsY0FBWSxFQUNaQyxNQUFPUCxFQUVQUSxRQUFTLEtBZVgseUJBQUtOLFVBQVUsV0FBV0MsTUFBTyxDQUFFTSxNQUFPLE1BQU9DLE9BQVEsT0FBUUMsVUFBVyxXQUMxRSw2QkFDQSw2QkFGRiwwREFJRSw2QkFDQSw2QkFDQSw0QkFDSVQsVUFBVSxZQUNWVSxRQUFVLGtCQUFNbkIsR0FBa0IsS0FFbEMsa0JBQUMsSUFBRCxDQUFRb0IsS0FBSyxXQUk3QixrQkFBQyxJQUFELENBQ0lDLE9BQVN0QixFQUNUdUIsUUFBVSxrQkFBTXRCLEdBQWtCLEtBRWxDLHdDQU1ESiIsImZpbGUiOiJjaHVua3Mvc3RhdHVtLWRhc2hib2FyZC5hMzRjNjFlNi4zMi5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vICNyZWdpb24gTW9kdWxlc1xuaW1wb3J0IFJlYWN0LCB7XG4gICAgdXNlU3RhdGUsXG4gICAgdXNlRWZmZWN0LFxuICAgIHVzZVJlZixcbiAgICB1c2VSZWR1Y2VyXG59IGZyb20gJ3JlYWN0J1xuaW1wb3J0IEZBSWNvbiBmcm9tICdyZWFjdC1mb250YXdlc29tZSdcbi8vICNlbmRyZWdpb25cblxuLy8gI3JlZ2lvbiBDb21wb25lbnRzXG5pbXBvcnQge1xuICAgIE1vZGFsXG59IGZyb20gJ2NvbXBvbmVudHMnXG5pbXBvcnQgeyBNYXN0ZXJHcmlkIH0gZnJvbSAnY29tcG9uZW50cy9ncmlkJ1xuLy8gI2VuZHJlZ2lvblxuXG4vLyAjcmVnaW9uIEFzc2V0cyAmIERhdGFcbi8vICNlbmRyZWdpb25cblxuZXhwb3J0IGNvbnN0IERhc2hib2FyZCA9IChwcm9wcykgPT4ge1xuICAgIC8vICNyZWdpb24gU1RBVEVcbiAgICBjb25zdCBbaXNBZGRNb2RhbE9wZW4sIHNldElzQWRkTW9kYWxPcGVuXSA9IHVzZVN0YXRlKGZhbHNlKVxuICAgIGNvbnN0IFt0aWxlcywgc2V0VGlsZXNdID0gdXNlU3RhdGUoW1xuICAgICAgICB7XG4gICAgICAgICAgICB0eXBlOiAnd2lkZ2V0OndlYXRoZXInLFxuICAgICAgICAgICAgbGF5b3V0OiB7XG4gICAgICAgICAgICAgICAgeDogMCwgeTogMCwgdzogMTIsIGg6IDE0XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIHR5cGU6ICd3aWRnZXQ6bmV3cycsXG4gICAgICAgICAgICBsYXlvdXQ6IHtcbiAgICAgICAgICAgICAgICB4OiAxMiwgeTogMCwgdzogMjQsIGg6IDI4XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIHR5cGU6ICd3aWRnZXQ6eW91dHViZScsXG4gICAgICAgICAgICAvLyBkYXRhOiB7XG4gICAgICAgICAgICAvLyAgICAgdXJsOiAnJ1xuICAgICAgICAgICAgLy8gfSxcbiAgICAgICAgICAgIGxheW91dDoge1xuICAgICAgICAgICAgICAgIHg6IDAsIHk6IDE0LCB3OiAxMiwgaDogMTRcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIF0pXG4gICAgY29uc3QgZGF0YSA9IFtdXG4gICAgLy8gI2VuZHJlZ2lvblxuXG4gICAgLy8gI3JlZ2lvbiBMSUZFQ1lDTEVcbiAgICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIH0sIFtdKVxuICAgIC8vICNlbmRyZWdpb25cblxuICAgIC8vICNyZWdpb24gTUlTQ1xuXG4gICAgLy8gI2VuZHJlZ2lvblxuXG4gICAgcmV0dXJuIChcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9J3BhZ2UnPlxuICAgICAgICAgICAgPGJyIC8+XG4gICAgICAgICAgICA8aDE+Jm5ic3A7Jm5ic3A7U3RhdHVtPC9oMT5cbiAgICAgICAgICAgIDxociBzdHlsZT17eyBtYXJnaW5Cb3R0b206IDAgfX0vPlxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHRpbGVzLmxlbmd0aCA+PSAwXG4gICAgICAgICAgICAgICAgICAgID8gPE1hc3RlckdyaWRcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzRXhwb3J0YWJsZVxuICAgICAgICAgICAgICAgICAgICAgICAgaXRlbXM9e3RpbGVzfVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gZGF0YT17ZGF0YX1cbiAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbnM9e3tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBoZWlnaHQ6XG4gICAgICAgICAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gb25Ecm9wSXRlbT17b25Ecm9wfVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gb25BZGRJdGVtPXthZGRUaWxlfVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gb25FZGl0SXRlbT17ZWRpdFRpbGUgfVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gb25DbGlja0l0ZW09e3NlbGVjdFRpbGV9XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBvbkNsZWFySXRlbT17Y2xlYXJUaWxlfVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gb25EZWxldGVJdGVtPXtkZWxldGVUaWxlfVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gb25DaGFuZ2VJdGVtPXt1cGRhdGVUaWxlfVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gb25DaGFuZ2VMYXlvdXQ9eyB0aGlzLnVwZGF0ZUxheW91dChpKSB9XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBhY3RpdmVUaWxlSW5kZXg9e1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgIGFjdGl2ZVNsaWRlSW5kZXggPT09IGkgPyBhY3RpdmVUaWxlSW5kZXggOiB1bmRlZmluZWRcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIH1cbiAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICAgICAgOiA8ZGl2IGNsYXNzTmFtZT0nY2VudGVyZWQnIHN0eWxlPXt7IHdpZHRoOiAnNTAlJywgbWFyZ2luOiAnYXV0bycsIHRleHRBbGlnbjogJ2NlbnRlcicgfX0+XG4gICAgICAgICAgICAgICAgICAgICAgICA8YnIgLz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxiciAvPlxuICAgICAgICAgICAgICAgICAgICBXZWxjb21lIHRvIFN0YXR1bSEgUGxlYXNlIGFkZCBhIHRpbGUgdG8geW91ciBkYXNoYm9hcmQuXG4gICAgICAgICAgICAgICAgICAgICAgICA8YnIgLz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxiciAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT0nYmlnLXJvdW5kJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9eyAoKSA9PiBzZXRJc0FkZE1vZGFsT3Blbih0cnVlKSB9XG4gICAgICAgICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPEZBSWNvbiBuYW1lPSdwbHVzJyAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgPE1vZGFsXG4gICAgICAgICAgICAgICAgaXNPcGVuPXsgaXNBZGRNb2RhbE9wZW4gfVxuICAgICAgICAgICAgICAgIG9uQ2xvc2U9eyAoKSA9PiBzZXRJc0FkZE1vZGFsT3BlbihmYWxzZSkgfVxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIDxoMT5IZWxsbzwvaDE+XG4gICAgICAgICAgICA8L01vZGFsPlxuICAgICAgICA8L2Rpdj5cbiAgICApXG59XG5cbmV4cG9ydCBkZWZhdWx0IERhc2hib2FyZFxuIl0sInNvdXJjZVJvb3QiOiIifQ==