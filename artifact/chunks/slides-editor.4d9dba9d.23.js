(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{1130:function(e,t,n){"use strict";n.r(t),n.d(t,"SlidesEditor",(function(){return D}));var a=n(0),i=n.n(a),l=n(6),o=n.n(l),r=n(9),c=n(241),s=n(244),d=n(240),u=(n(27),{name:"Slides",icon:"layer-group",props:[{name:"pages",type:"number",defaultValue:1},{name:"width",type:"number",defaultValue:100},{name:"cols",type:"number",defaultValue:12},{name:"rowHeight",type:"number",defaultValue:32},{name:"maxRows",type:"number",defaultValue:32},{name:"autoSize",type:"boolean",defaultValue:!0},{name:"verticalCompact",type:"boolean",defaultValue:!0},{name:"isDraggable",type:"boolean",defaultValue:!0},{name:"isResizable",type:"boolean",defaultValue:!0},{name:"preventCollision",type:"boolean",defaultValue:!0}]}),m=n(70),f=[{name:"Empty",tiles:[{layout:{x:0,y:0,w:8,h:8}}]},{name:"Header/Content",tiles:[{layout:{x:0,y:0,w:8,h:8}},{layout:{x:8,y:0,w:40,h:8}},{layout:{x:0,y:8,w:48,h:28}}]},{name:"Header/Content/Footer",tiles:[{layout:{x:0,y:0,w:48,h:8}},{layout:{x:0,y:8,w:32,h:20}},{layout:{x:32,y:8,w:16,h:20}},{layout:{x:0,y:28,w:48,h:8}}]},{name:"Left/Right-Children",tiles:[{layout:{x:0,y:0,w:20,h:36}},{layout:{x:20,y:0,w:28,h:18}},{layout:{x:20,y:18,w:28,h:18}}]},{name:"Quad",tiles:[{layout:{x:0,y:0,w:24,h:12}},{layout:{x:24,y:0,w:24,h:12}},{layout:{x:0,y:12,w:12,h:12}},{layout:{x:12,y:12,w:24,h:12}},{layout:{x:36,y:12,w:12,h:12}},{layout:{x:0,y:24,w:24,h:12}},{layout:{x:24,y:24,w:24,h:12}}]}],p=n(101),v=n(1140),h=n(81),g=(n(521),n(1162)),y=n.n(g);function b(e){return(b="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function S(e){return function(e){if(Array.isArray(e)){for(var t=0,n=new Array(e.length);t<e.length;t++)n[t]=e[t];return n}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function E(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function w(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?E(Object(n),!0).forEach((function(t){T(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):E(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function T(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function x(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}function I(e,t){return!t||"object"!==b(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function C(e){return(C=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function O(e,t){return(O=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var N=f[0],D=function(e){function t(e){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),(n=I(this,C(t).call(this,e))).state={config:{},isModalOpen:!1,isConfigModalOpen:!1,activeSlideIndex:0,isSwitching:!1,options:w({},u,{props:u.props.map((function(e){return w({},e,{value:e.defaultValue})}))}),values:{},slides:[],slideImages:[],slideshow:{name:"New Slideshow"},activeLayoutIndex:0,activeTileIndex:parseInt(Math.random()*N.tiles.length)},n.showModal=function(e){return function(){return n.setState({isModalOpen:!0,activeModal:e})}},n.hideModal=function(){return n.setState({isModalOpen:!1,activeModal:void 0})},n.showTileModal=function(){return n.setState({isModalOpen:!0})},n.hideTileModal=function(){return n.setState({isModalOpen:!1})},n.onChange=function(e){return function(t){var a=t.target.value;n.setState({values:w({},n.state.values,T({},e,a))},(function(){return console.log(n.state.values)}))}},n.updateSlideshow=function(e){return function(t){n.setState({slideshow:w({},n.state.slideshow,T({},e,t.target.value))},(function(){return console.log(t.target.value)}))}},n.setStateTile=function(e,t){arguments.length>2&&void 0!==arguments[2]&&arguments[2];var a=n.state,i=a.slides,l=a.activeSlide,o=a.activeSlideIndex,r=w({},l,{tiles:[].concat(S(l.tiles.slice(0,e)),[w({},l.tiles[e],{data:t})],S(l.tiles.slice(e+1)))});n.setStateSlide(o,r,(function(){return console.log("setSlide(".concat(o,") => setTile(").concat(e,"): "),i[e])}))},n.scrollTo=function(e,t){var a=!(arguments.length>2&&void 0!==arguments[2])||arguments[2],i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:-1,l="top"===t?"topOf":"bottomOf";setTimeout((function(){a?n[l].accordion[e]:i>=0?n[l][e][i]:n[l][e]}),300)},n.selectLayout=function(e,t){return function(){var a=n.state.activeSlideIndex;n.setState({isSwitching:!0,activeLayoutIndex:t}),setTimeout((function(){var t=n.state.slides;n.setState({layout:void 0,activeTileIndex:void 0,slides:[].concat(S(t.slice(0,a)),[w({},t[a],{tiles:[]})],S(t.slice(a+1)))},(function(){setTimeout((function(){var t=n.state.slides;n.setState({layout:e,isSwitching:!1,slides:[].concat(S(t.slice(0,a)),[{tiles:e.tiles}],S(t.slice(a+1)))})}),250)}))}),250)}},n.captureSlide=function(e){setTimeout((function(){var t="vision-viz-slide-".concat(e),a=document.getElementById(t);console.log("captureSlide ",e),Object(p.toPng)(a).then((function(t){var a=n.state.slideImages;n.setState({slideImages:[].concat(S(a.slice(0,e)),[t],S(a.slice(e+1)))})})).catch((function(e){console.log("error",e)}))}),150)},n.exportSlidesTo=function(e){return function(){n.state.slideImages;switch(e){case"pdf":break;default:alert("Unsupported export format: ",e)}}},n.saveSlides=function(){var e=n.state,t=e.slides,a=e.slideshow,i=window.location.pathname.split("/").pop();console.log("SAVE slides",i,"'".concat(a.name,"'")),"start"===i||v.b.REF("slides/"+i).update({name:a.name,updatedAt:(new Date).toISOString(),slides:t})},n.setStateSlide=function(e,t){var a=arguments.length>2&&void 0!==arguments[2]?arguments[2]:function(){};n.setState({slides:[].concat(S(n.state.slides.slice(0,e)),[t],S(n.state.slides.slice(e+1)))},a)},n.addSlide=function(){var e=n.state,t=e.slides,a=(e.activeSlideIndex,{title:"Slide ".concat(t.length+1),color:"#333333",backgroundColor:"transparent",displayDuration:10,tiles:[]});n.setState({activeSlideIndex:t.length,activeSlide:a,slides:[].concat(S(t),[a])},(function(){n.captureSlide(n.state.slides.length-1),n.scrollTo("slides","bottom"),n.scrollTo("slides","bottom",!1)}))},n.goToSlide=function(e){arguments.length>1&&void 0!==arguments[1]&&arguments[1];return function(){n.setState({activeSlideIndex:e,activeSlide:n.state.slides[e]}),n.scrollTo("slides","bottom",!1,e),n.scrollTo("slides","top",!1,e)}},n.setSlide=function(e){return function(t){var a=n.state,i=a.activeSlide,l=a.activeSlideIndex;console.log("setSlide",l,e,t.target.value),n.setStateSlide(l,w({},i,T({},e,t.target.value)),(function(){return console.log("setSlide",e,n.state)}))}},n.deleteSlide=function(e){return function(){var t=n.state.slides;n.setState({slides:[].concat(S(t.slice(0,e)),S(t.slice(e+1)))})}},n.updateLayout=function(e){return function(t){var a=n.state.slides[e];n.captureSlide(e),n.setStateSlide(e,w({},a,{tiles:a.tiles.map((function(n,a){var i=t&&t[e]&&"object"===b(t[e])&&Object.keys(t[e]);if(i){var l={};i.filter((function(n){return void 0!==t[e][n]})).forEach((function(n){l[n]=t[e][n]}));var o=w({},n,{layout:l});return console.log({updatedTile:o}),o}return n}))}))}},n.addNewTile=function(e,t){var a=n.state,i=a.activeSlide,l=a.activeSlideIndex,o=w({},i,{tiles:[].concat(S(i.tiles),[{layout:e,type:t}])});n.setStateSlide(l,o,(function(){return console.log({newSlide:o},n.state)}))},n.addTile=function(e){var t=n.state,a=t.activeSlide,i=t.activeSlideIndex,l=t.newTileType;setTimeout((function(){var t=w({},a,{tiles:[].concat(S(a&&a.tiles||[]),[{type:l||"grid:empty",layout:e||{x:0,y:0,w:16,h:12}}])});n.setStateSlide(i,t,(function(){return n.captureSlide(i)}))}),100)},n.editTile=function(e,t){var a=n.state,i=a.activeTileIndex,l=a.activeTileType,o=a.activeSlideIndex,r=a.slides,c=r[o],s=c[i];n.setState({slides:[].concat(S(r.slice(0,o)),[w({},c,{tiles:[].concat(S(c.tiles.slice(0,i)),[w({},s,{type:l})],S(c.tiles.slice(i+1)))})],S(r.slice(o+1)))},(function(){}))},n.clearTile=function(e){var t=n.state,a=t.slides,i=a[t.activeSlideIndex],l=a&&i&&i.length>0&&i[e];n.setState({activeTileType:void 0,activeTileIndex:void 0,isModalOpen:!1},(function(){return n.setStateTile(e,{layout:l.layout},(function(){return console.log("clearTile:")}))}))},n.deleteTile=function(e){var t=n.state,a=t.activeSlide,i=t.activeSlideIndex;n.setStateSlide(i,w({},a,{tiles:[].concat(S(a.tiles.slice(0,e)),S(a.tiles.slice(e+1)))}))},n.selectTile=function(e){return function(){var t=n.state,a=t.slides,i=t.activeSlideIndex,l=a[i]&&a[i].length>0&&a[i][e];n.setState({activeTile:l,activeTileIndex:e}),n.scrollTo("tile","bottom")}},n.updateTile=function(e,t){n.setStateTile(e,t)},n.setTileType=function(e){return function(){n.setState({activeTileType:e,isModalOpen:!1},n.saveTileConfig)}},n.setNewTileType=function(e){return function(){console.log(e),n.setState({newTileType:e})}},n.openModalWithTile=function(e){n.showTileModal(),n.setState({activeTileIndex:e})},n.showConfigModal=function(){return n.setState({isConfigModalOpen:!0})},n.hideConfigModal=function(){return n.setState({isConfigModalOpen:!1})},n.editTile=function(e){console.log("editing tile",e),n.setState({config:{tile:e,data:e.data}}),n.showConfigModal()},n.saveTileConfig=function(){var e=n.state,t=e.activeTileIndex,a=e.activeTileType,i=e.activeSlideIndex,l=e.slides,o=l[i],r=o[t];n.setState({isModalOpen:!1,slides:[].concat(S(l.slice(0,i)),[w({},o,{tiles:[].concat(S(o.tiles.slice(0,t)),[w({},r,{type:a})],S(o.tiles.slice(t+1)))})],S(l.slice(i+1)))},(function(){return n.captureSlide(i)}))},n.getTileConfig=function(e){return s.a.options.filter((function(t){return t.type===e})).pop()},n.onDrop=function(e){n.addNewTile(w({},e,{w:12,h:6}),n.state.newTileType)},n.renderSlides=function(){var e=n.state,t=e.slides,a=e.isSwitching,l=e.activeTileIndex,o=e.activeSlideIndex,c=e.activeLayoutIndex;return i.a.createElement("div",null,i.a.createElement("div",{ref:function(e){n.topOf.slides.container=e}}),t.map((function(e,m){return i.a.createElement("div",{key:m,onClick:function(){return n.setState({activeSlideIndex:m,activeSlide:t[m]})},className:o===m?"fade-default fade-".concat(a?"out":"in"):"",style:{marginBottom:"3rem",height:"".concat(850,"px"),overflow:"hidden"}},i.a.createElement("div",{ref:function(e){n.topOf.slides[m]=e}}),i.a.createElement(r.a,{title:e.title,isOpenDefault:!1,onAdd:n.addTile,onClose:n.deleteSlide(m)},i.a.createElement(r.w,{className:"padded",defaultTab:"details",keys:["details","layout","templates","config"],templates:i.a.createElement("div",null,"Coming soon..."),details:i.a.createElement("div",{className:"flex-row space-between"},i.a.createElement("div",null,i.a.createElement("div",null,"Title"),i.a.createElement("input",{value:e.title,type:"text",onChange:n.setSlide("title")})),i.a.createElement("div",null,i.a.createElement("div",null,"Background Color"),i.a.createElement("input",{value:e.backgroundColor,defaultValue:e.backgroundColor,type:"color",onChange:n.setSlide("backgroundColor")})),i.a.createElement("div",null,i.a.createElement("div",null,"Text Color"),i.a.createElement("input",{value:e.color,defaultValue:e.color,type:"color",onChange:n.setSlide("color")})),i.a.createElement("div",null,"Slide display duration"),i.a.createElement("input",{type:"number",value:e.displayDuration,onChange:n.setSlide("displayDuration")})),layout:i.a.createElement("div",{className:"flex-row flex-wrap"},f.map((function(e,t){return i.a.createElement("div",{key:t,className:"card",style:{cursor:"pointer",width:"202px",height:"125px",border:"2px solid #00adee",borderColor:c===t?"#00adee":"transparent"},onClick:n.selectLayout(e,t)},i.a.createElement(r.p,{fill:"#eeeeef",template:e,width:200,height:120}))}))),config:i.a.createElement("div",null,i.a.createElement("p",null,"Configure the properties of your grid, including column count, row height, compacting behaviour (e.g. vertical, horizontal or none), etc."),u.props.map((function(e,t){return i.a.createElement("div",{key:t},i.a.createElement(r.g,{onChange:n.onChange,type:e.type,label:e.name,name:e.name,defaultValue:e.defaultValue,props:e.children,isExpanded:!0}))})))})),i.a.createElement("div",{id:"vision-viz-slide-".concat(m),style:{background:e.backgroundColor,minHeight:"".concat(850,"px"),color:e.color}},i.a.createElement(s.a,{isExportable:!0,items:e.tiles,data:d.a,options:{height:850},onDropItem:n.onDrop,onAddItem:n.addTile,onEditItem:n.editTile,onClickItem:n.selectTile,onClearItem:n.clearTile,onDeleteItem:n.deleteTile,onChangeItem:n.updateTile,onChangeLayout:n.updateLayout(m),activeTileIndex:o===m?l:void 0})),i.a.createElement(k,{length:t.length,index:m}),i.a.createElement("div",{ref:function(e){n.bottomOf.slides[m]=e}}))})),i.a.createElement("div",{ref:function(e){n.bottomOf.slides.container=e}}))},n.bottomOf={accordion:{},slides:{}},n.topOf={accordion:{},slides:{}},n}var n,a,l;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&O(e,t)}(t,e),n=t,(a=[{key:"componentDidMount",value:function(){var e=this,t=window.location.pathname.split("/").pop();"start"===t?w({},N,{backgroundColor:"#ffffff",name:"NewSlides",tiles:f[0].tiles}):v.b.get("slides/",(function(n){console.log("GET slides/"+t,n.val()[t]),e.setState({slides:n.val()[t].slides||[],slideshow:w({},e.state.slideshow,{},n.val()[t]),activeSlide:e.state.slideshow.slides.pop(),activeSlideIndex:0},(function(){return console.log(e.state)}))}))}},{key:"render",value:function(){var e=this,t=this.state,n=t.config,a=(t.jsonString,t.jsonObject,t.slides),l=t.slideshow,s=t.slideImages,d=t.activeSlideIndex,f=t.activeModal,p=(t.activeTile,t.activeTileType,t.isModalOpen),v=t.isConfigModalOpen,g={paddingLeft:"0.35rem",paddingRight:"0.65rem",border:"none"};return i.a.createElement("div",{className:"page"},i.a.createElement(r.o,{rightDiv:i.a.createElement("div",null,i.a.createElement("div",{className:"page-header padded"},l&&a.length>0?i.a.createElement("div",{className:"full-width flex-row space-between"},i.a.createElement(r.j,{value:l.name,onChange:function(){}}),i.a.createElement("div",null,i.a.createElement(r.b,{onSave:this.saveResource,onDelete:this.showDeleteResourceModal,onCancel:this.showCancelResourceModal}))):i.a.createElement("div",null,"Get Started")),i.a.createElement("div",{className:"divider horizontal"}),l&&a.length>0?this.renderSlides():i.a.createElement("div",{className:"padded"},i.a.createElement("div",{id:"guide"},i.a.createElement("h4",null,"1. Add a Slide & Tiles"),i.a.createElement("img",{src:y.a,className:"help-gif padded"}),i.a.createElement("h4",null,"2. Configure Tile"),i.a.createElement("h4",null,"3. Configure Slide"),i.a.createElement("h4",null,"4. Save Slideshow"))),i.a.createElement("div",{ref:function(t){e.slidesEnd=t}})),leftDiv:i.a.createElement("div",null,i.a.createElement("div",{className:"page-header space-between padded"},i.a.createElement("div",{className:"flex-row"},i.a.createElement(o.a,{className:"icon",name:u.icon}),i.a.createElement("br",null),i.a.createElement("div",{className:"title"},u.name)),i.a.createElement("div",null,i.a.createElement("button",{className:"primary hollow action-button",onClick:this.addSlide},i.a.createElement("div",{className:"icon"},i.a.createElement(o.a,{name:"plus-circle"}))))),i.a.createElement("div",{className:"divider horizontal"}),i.a.createElement(r.w,{defaultTab:"apps",keys:["apps","slides","share"],slides:i.a.createElement("div",{className:"padded"},i.a.createElement("div",{style:{position:"relative",height:"calc(100%)",overflow:"hidden",overflowY:"auto"}},i.a.createElement("br",null),a.map((function(t,n){return i.a.createElement("div",{key:n,className:"card thumbnail-preview",style:{backgroundColor:t.backgroundColor,border:"2px solid ".concat(n===d?"#00adee":"transparent"),color:n===d?"#00adee":"#aaa",marginBottom:"0.5rem"},onClick:e.goToSlide(n,(function(){return console.log("goToSlide [ "+n+" ] from SlidesPanel")}))},i.a.createElement("img",{style:{width:"12rem",height:"auto",overflow:"hidden"},src:s[n]}))}))),i.a.createElement("br",null),i.a.createElement("div",{ref:function(t){e.bottomOf.accordion.slides=t}})),share:i.a.createElement("div",{className:"flex-row",style:{padding:"calc(0.5rem - 1.5px)"}},[{name:"Preview",type:"preview",icon:"play"},{name:"PDF Export",type:"pdf",icon:"file-pdf"},{name:"Online Link",type:"online",icon:"globe"}].map((function(t,n){return i.a.createElement("div",{key:n},i.a.createElement("button",{className:"primary hollow round",style:g,onClick:e.exportSlidesTo(t.type)},i.a.createElement("div",null,"  ",i.a.createElement(o.a,{name:t.icon}))))}))),apps:i.a.createElement("div",{className:"flex-col auto-scroll-y",style:{height:"calc(100vh - 7rem)"}},m.a.map((function(t,n){return"category"===t.type?i.a.createElement("div",{className:"card padded"},t.name):i.a.createElement("div",{key:n,style:{width:"100%",height:t&&t.meta&&t.meta.iconUrl?"3rem":"2rem",background:t.meta.banner,color:"white",marginBottom:"0.5rem",cursor:"pointer"},draggable:!0,className:"card flex-row",unselectable:"on",onDragStart:function(n){n.dataTransfer.setData("text/plain",""),e.setNewTileType(t.type)()}},t&&t.meta&&t.meta.iconUrl&&i.a.createElement("img",{src:t.meta.iconUrl,style:{width:"3rem",height:"3rem"}}),i.a.createElement("div",{style:{height:"3rem",lineHeight:"3rem"}},t.name))})))}))}),i.a.createElement(c.b,{isOpen:v,type:"primary",submitText:"Update",cancelText:"Cancel",onSubmit:this.saveAppConfig,onCancel:this.hideConfigModal},n.tile&&n.tile.type,n&&n.tile&&(Object(h.b)(n.tile.type)||{props:[]}).props.map((function(t,n){return i.a.createElement("div",{key:n},i.a.createElement(r.g,{onChange:e.onChange,type:t.type,label:t.name,name:t.name,defaultValue:t.defaultValue}))}))),i.a.createElement(c.a,{isOpen:p,activeModal:f,resourceName:"Slide",onCancel:this.hideModal,onAction:{save:this.saveSlides,remove:this.deleteResource,create:this.addResource},views:{save:i.a.createElement("div",null,i.a.createElement("div",null,"Saving will override the existing Slideshow."),i.a.createElement("br",null),i.a.createElement("div",null,"Are you sure?")),close:i.a.createElement("div",null,i.a.createElement("div",null,"Leaving now will discard all unsaved changes!"),i.a.createElement("br",null),i.a.createElement("div",null,"Are you sure you want to leave the Slideshow?")),remove:i.a.createElement("div",null,i.a.createElement("div",null,"Deleting this Slideshow cannot be undone!"),i.a.createElement("br",null),i.a.createElement("div",null,"Are you sure?"))}}))}}])&&x(n.prototype,a),l&&x(n,l),t}(a.Component),k=function(e){var t=e.length,n=e.index;return i.a.createElement("div",{className:"slide-divider"},i.a.createElement("div",{className:"line"},i.a.createElement("hr",null)),i.a.createElement("div",{className:"text"},n+1+"  /  "+t),i.a.createElement("div",{className:"line"},i.a.createElement("hr",null)))};t.default=D},1140:function(e,t,n){"use strict";n.d(t,"a",(function(){return o}));var a=n(1093);n(1094),n(1095),n(1096);a.initializeApp({apiKey:"AIzaSyC-jjX9f71GjxEy-potKYFaQJg8kAsY7GA",authDomain:"vision-identity.firebaseapp.com",databaseURL:"https://vision-identity.firebaseio.com",projectId:"vision-identity",storageBucket:"vision-identity.appspot.com",messagingSenderId:"1091015811145",appId:"1:1091015811145:web:30bd18e335564b5be65f98",measurementId:"G-2ZMW0R12GQ"});var i,l,o=a.auth(),r=a.database(),c=(a.storage(),function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:void 0;return console.log("firebase.REF: ",e,t),r.ref("/".concat(e))}),s=function(e,t){return o.signInWithEmailAndPassword(e,t)},d=function(e,t){return o.createUserWithEmailAndPassword(e,t)},u=function(){return o.signOut()};t.b={AUTH:o,DB:r,REF:c,create:function(e,t){c(e).set(t)},updateItem:function(e,t){var n,a,i;r.ref().update((i=t,(a=e)in(n={})?Object.defineProperty(n,a,{value:i,enumerable:!0,configurable:!0,writable:!0}):n[a]=i,n))},get:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:function(e){console.log("firebase.get(snapshot) UNDEFINED",e)};c(e).once("value").then((function(e){t(e)}))},watch:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{onChange:function(e){return console.log("firebase.watch: onChange(snapshot) UNDEFINED",e)},onAddItem:function(e){return console.log("firebase.watch: onItemAdd(snapshot) UNDEFINED",e)},onChangeItem:function(e){return console.log("firebase.watch: onItemChange(snapshot) UNDEFINED",e)},onDeleteItem:function(e){return console.log("firebase.watch: onItemDelete(snapshot) UNDEFINED",e)}},n=t.onChange,a=t.onAddItem,i=t.onChangeItem,l=t.onDeleteItem;n&&c(e).on("value",(function(e){n(e)})),i&&c(e).on("value",(function(e){i(e)})),a&&c(e).on("value",(function(e){a(e)})),l&&c(e).on("child_removed",(function(e){l(e)}))},logOut:u,signOut:u,emailAuthLogin:s,login:s,emailAuthRegister:d,register:d},i="testing",l={hello:"world"},c("my/test").child(i).set(l)},1162:function(e,t,n){e.exports=n.p+"assets/images/slides_grid.gif"}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,