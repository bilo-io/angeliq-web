(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{1116:function(e,t,n){"use strict";n.r(t),n.d(t,"CryptonDashboard",(function(){return w}));var r=n(0),a=n.n(r),o=(n(6),n(5)),c=n(67),i=n(35),u=n(9),l=n(1144),s=(n(240),n(172)),d=n(1145);function f(e){return(f="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function p(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function y(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?p(Object(n),!0).forEach((function(t){b(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):p(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function b(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function m(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function h(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function g(e,t){return!t||"object"!==f(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function v(e){return(v=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function O(e,t){return(O=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var w=function(e){function t(){var e,n,r;m(this,t);for(var a=arguments.length,o=new Array(a),c=0;c<a;c++)o[c]=arguments[c];return g(r,(n=r=g(this,(e=v(t)).call.apply(e,[this].concat(o))),r.state={isLoading:{ipAddress:!0,countryForIP:!0,cryptoInfo:!0,cryptoIndex:!0,chartData:!0,cryptoCoins:!0},data:{}},r.setChartType=function(e){r.setState({chartType:e.target.value})},r.fetchLocationInfo=function(){Object(s.b)().then((function(e){var t=e.ip;r.setState({data:y({},r.state.data,{ipAddress:t})}),Object(s.a)(t).then((function(e){r.setState({data:y({},r.state.data,{country:e})})})).catch((function(e){console.log(e)})).finally((function(){r.setState({isLoading:y({},r.state.isLoading,{countryForIP:!1})})}))})).catch((function(e){console.log(e)})).finally((function(){r.setState({isLoading:y({},r.state.isLoading,{ipAddress:!1})})}))},r.onChange=function(e){},n))}var n,r,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&O(e,t)}(t,e),n=t,(r=[{key:"componentDidMount",value:function(){this.fetchLocationInfo(),this.fetchCryptoInfo()}},{key:"fetchCryptoInfo",value:function(){var e=this;Object(d.d)().then((function(t){e.setState({data:y({},e.state.data,{cryptoExchanges:t})})})).finally((function(){e.setState({isLoading:y({},e.state.isLoading,{cryptoExchanges:!1})})})),Object(d.e)().then((function(t){e.setState({data:y({},e.state.data,{cryptoGlobal:t})})})).finally((function(){e.setState({isLoading:y({},e.state.isLoading,{cryptoGlobal:!1})})})),Object(d.f)().then((function(t){e.setState({data:y({},e.state.data,{cryptoTrending:t})})})).finally((function(){e.setState({isLoading:y({},e.state.isLoading,{cryptoTrending:!1})})})),Object(d.c)().then((function(t){e.setState({data:y({},e.state.data,{cryptoExchangeRates:t})})})).finally((function(){e.setState({isLoading:y({},e.state.isLoading,{cryptoExchangeRates:!1})})})),Object(d.a)({id:"bitcoin",currency:"usd",days:7}).then((function(t){e.setState({data:y({},e.state.data,{chartData:t})})})).finally((function(){e.setState({isLoading:y({},e.state.isLoading,{chartData:!1})})}))}},{key:"render",value:function(){var e,t,n,r,o,c,i,s=this.state,d=s.isLoading,f=s.data,p=((f&&(null===(e=f.cryptoExchangeRates)||void 0===e?void 0:e.rates)?Object.keys(null==f?void 0:f.cryptoExchangeRates.rates):[]).map((function(e){return y({id:e,key:e},null==f?void 0:f.cryptoExchangeRates.rates[e])})),(null==f?void 0:null===(t=f.chartData)||void 0===t?void 0:null===(n=t.prices)||void 0===n?void 0:n.length)>0?f.chartData.prices.map((function(e){return[new Date(e[0]),e[1]]})):[1,2,3]);return a.a.createElement("div",{className:"page dark"},a.a.createElement("div",null,a.a.createElement("h1",null,"Crypton Dashboard"),a.a.createElement(u.c,{isLoading:d.ipAddress},a.a.createElement("div",{className:"card flex-row space-between",style:{padding:"1rem",borderRadius:"6px",border:"1px solid rgba(grey, 0.5)"}},a.a.createElement("div",null,"IP: ",a.a.createElement("strong",null,f.ipAddress)),a.a.createElement(u.c,{isLoading:d.country},a.a.createElement("div",{className:"flex-row space-between"},a.a.createElement("div",null,null===(r=f.country)||void 0===r?void 0:r.countryName),a.a.createElement("div",null,"(",null===(o=f.country)||void 0===o?void 0:o.countryCode,")"),a.a.createElement("div",null,null===(c=f.country)||void 0===c?void 0:c.countryEmoji)))),a.a.createElement(u.c,{isLoading:d.chartData},a.a.createElement(l.a,{data:p||[]}))),a.a.createElement(u.c,{isLoading:d.cryptoExchanges},a.a.createElement("div",null,"CryptoExchanges: ",a.a.createElement("strong",null,a.a.createElement("pre",null,JSON.stringify(f.cryptoExchanges,void 0,2)))),a.a.createElement("div",{className:"flex-row flex-wrap"},null==f?void 0:null===(i=f.cryptoExchanges)||void 0===i?void 0:i.map((function(e,t){return a.a.createElement("div",{key:"cryptoCurrency-".concat(t),className:"card padded",style:{border:"1px solid rgba(grey, 0.5)",width:"16rem",height:"8rem",margin:"0.5rem",overflow:"hidden"}},a.a.createElement("div",{className:"flex-row space-between"},a.a.createElement("img",{style:{width:"4rem",height:"auto"},src:e.image}),a.a.createElement("div",null,e.name)),a.a.createElement("br",null),a.a.createElement("div",{className:"flex-row"}),a.a.createElement("div",null,e.country),a.a.createElement("div",null,e.trade_volume_24h_btc),a.a.createElement("div",null,e.trade_volume_24h_btc_normalized),a.a.createElement("div",null,e.trust_score),a.a.createElement("div",null,e.country),a.a.createElement("a",{href:e.url,target:"_blank"},e.url),a.a.createElement("div",null,"Established: ",e.year_established))}))))))}}])&&h(n.prototype,r),o&&h(n,o),t}(r.Component);t.default=Object(c.b)((function(e){return{}}),(function(e){return Object(i.b)({},e)}))(Object(o.g)(w))},1144:function(e,t,n){"use strict";n.d(t,"a",(function(){return g}));var r=n(0),a=n.n(r),o=n(520),c=n.n(o),i=n(1100),u=n.n(i),l=n(1148),s=n.n(l),d=n(9);function f(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function p(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?f(Object(n),!0).forEach((function(t){y(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):f(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function y(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function b(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if(!(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e)))return;var n=[],r=!0,a=!1,o=void 0;try{for(var c,i=e[Symbol.iterator]();!(r=(c=i.next()).done)&&(n.push(c.value),!t||n.length!==t);r=!0);}catch(e){a=!0,o=e}finally{try{r||null==i.return||i.return()}finally{if(a)throw o}}return n}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}c.a.theme=s.a,c.a.setOptions(c.a.theme);var m=[{label:"Y",days:365,date:new Date-31536e6},{label:"M",days:30,date:new Date-2592e6},{label:"W",days:7,date:new Date-6048e5},{label:"D",days:1,date:new Date-864e5},{label:"H",days:0,date:new Date-36e5}],h={title:{text:"CryptonChart"},theme:{},tickInterval:864e5,series:["1","2","3"]},g=function(e){var t=e.data,n=e.series,o=e.title,i=e.period,l=e.isLoading,s=b(Object(r.useState)(p({},h)),2),f=s[0],y=s[1];Object(r.useEffect)((function(){y(p({},h,{series:n,title:{text:o}}))}),[t,n]);return a.a.createElement("div",{className:"card",style:{width:"calc(100% - 2rem)",margin:"1rem",borderRadius:"8px"}},a.a.createElement("div",{className:"flex-row"},(m||[]).map((function(t,n){return a.a.createElement("button",{key:n,className:"hollow ".concat(i.label===t.label?"primary":""),onClick:function(){return function(t){var n;null===(n=e.onChangeRange)||void 0===n||n.call(e,t)}(t)}},(null==t?void 0:t.label)||"X")}))),a.a.createElement(d.c,{isLoading:l},a.a.createElement(u.a,{highcharts:c.a,options:f})))};t.b=g},1145:function(e,t,n){"use strict";n.d(t,"e",(function(){return i})),n.d(t,"f",(function(){return u})),n.d(t,"c",(function(){return l})),n.d(t,"d",(function(){return s})),n.d(t,"a",(function(){return d})),n.d(t,"b",(function(){return p}));var r=n(219);function a(e,t,n,r,a,o,c){try{var i=e[o](c),u=i.value}catch(e){return void n(e)}i.done?t(u):Promise.resolve(u).then(r,a)}function o(e){return function(){var t=this,n=arguments;return new Promise((function(r,o){var c=e.apply(t,n);function i(e){a(c,r,o,i,u,"next",e)}function u(e){a(c,r,o,i,u,"throw",e)}i(void 0)}))}}var c="https://api.coingecko.com/api/v3",i=function(){var e=o(regeneratorRuntime.mark((function e(){var t;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t="".concat(c,"/global"),e.next=3,Object(r.a)(t);case 3:return e.abrupt("return",e.sent);case 4:case"end":return e.stop()}}),e)})));return function(){return e.apply(this,arguments)}}(),u=function(){var e=o(regeneratorRuntime.mark((function e(){var t;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t="".concat(c,"/search/trending"),e.next=3,Object(r.a)(t);case 3:return e.abrupt("return",e.sent);case 4:case"end":return e.stop()}}),e)})));return function(){return e.apply(this,arguments)}}(),l=function(){var e=o(regeneratorRuntime.mark((function e(){var t;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t="".concat(c,"/exchange_rates"),e.next=3,Object(r.a)(t);case 3:return e.abrupt("return",e.sent);case 4:case"end":return e.stop()}}),e)})));return function(){return e.apply(this,arguments)}}(),s=function(){var e=o(regeneratorRuntime.mark((function e(){var t,n,a=arguments;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t=a.length>0&&void 0!==a[0]?a[0]:"",n="".concat(c,"/exchanges").concat((null==t?void 0:t.length)>0?"/".concat(t):""),e.next=4,Object(r.a)(n);case 4:return e.abrupt("return",e.sent);case 5:case"end":return e.stop()}}),e)})));return function(){return e.apply(this,arguments)}}(),d=function(){var e=o(regeneratorRuntime.mark((function e(t){var n,a,o,i;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return n=t.id,a=t.currency,o=t.days,i="".concat(c,"/coins/").concat(n,"/market_chart?vs_currency=").concat(a,"&days=").concat(o),e.next=4,Object(r.a)(i);case 4:return e.abrupt("return",e.sent);case 5:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}(),f=function(){var e=o(regeneratorRuntime.mark((function e(){var t,n,a=arguments;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t=a.length>0&&void 0!==a[0]?a[0]:"bitcoin",n="".concat(c,"/coins/").concat(t,"/history?date=","01-01-2020"),e.next=4,Object(r.a)(n);case 4:return e.abrupt("return",e.sent);case 5:case"end":return e.stop()}}),e)})));return function(){return e.apply(this,arguments)}}(),p=function(){var e=o(regeneratorRuntime.mark((function e(){var t,n,a=arguments;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t=a.length>0&&void 0!==a[0]?a[0]:"",n="".concat(c,"/coins").concat((null==t?void 0:t.length)>0?"/".concat(t):""),e.next=4,Object(r.a)(n);case 4:return e.abrupt("return",e.sent);case 5:case"end":return e.stop()}}),e)})));return function(){return e.apply(this,arguments)}}();console.log(f("bitcoin"))},1148:function(e,t){e.exports={colors:["#00adee","#2980b9","#2ecc71","#3499ad","#2c3e50","#03aedd"],chart:{backgroundColor:"#1D1D1D",style:{fontFamily:"Roboto",color:"#666666"}},title:{align:"left",style:{fontFamily:"Roboto Condensed",fontWeight:"bold"}},subtitle:{align:"left",style:{fontFamily:"Roboto Condensed"}},legend:{align:"right",verticalAlign:"bottom",itemStyle:{color:"#424242"}},xAxis:{gridLineColor:"#424242",gridLineWidth:1,minorGridLineColor:"#424242",minoGridLineWidth:.5,tickColor:"#424242",minorTickColor:"#424242",lineColor:"#424242"},yAxis:{gridLineColor:"#424242",ridLineWidth:1,minorGridLineColor:"#424242",inoGridLineWidth:.5,tickColor:"#424242",minorTickColor:"#424242",lineColor:"#424242"},plotOptions:{line:{marker:{enabled:!1}},spline:{marker:{enabled:!1}},area:{marker:{enabled:!1}},areaspline:{marker:{enabled:!1}},arearange:{marker:{enabled:!1}},bubble:{maxSize:"10%"}}}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvYXBwcy9jcnlwdG9uL2Rhc2hib2FyZC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvYXBwcy9jcnlwdG9uL2NoYXJ0LmpzIiwid2VicGFjazovLy8uL3NyYy91dGlsL2FwaXMvY3J5cHRvLmpzIiwid2VicGFjazovLy8uL3NyYy9hcHBzL2NyeXB0b24vY2hhcnQvdGhlbWUuanMiXSwibmFtZXMiOlsiQ3J5cHRvbkRhc2hib2FyZCIsInN0YXRlIiwiaXNMb2FkaW5nIiwiaXBBZGRyZXNzIiwiY291bnRyeUZvcklQIiwiY3J5cHRvSW5mbyIsImNyeXB0b0luZGV4IiwiY2hhcnREYXRhIiwiY3J5cHRvQ29pbnMiLCJkYXRhIiwic2V0Q2hhcnRUeXBlIiwiZSIsInNldFN0YXRlIiwiY2hhcnRUeXBlIiwidGFyZ2V0IiwidmFsdWUiLCJmZXRjaExvY2F0aW9uSW5mbyIsImZldGNoSVBBZGRyZXNzIiwidGhlbiIsInJlc3BvbnNlIiwiaXAiLCJmZXRjaENvdW50cnlGb3JJUCIsImNvdW50cnkiLCJjYXRjaCIsImVycm9yIiwiY29uc29sZSIsImxvZyIsImZpbmFsbHkiLCJvbkNoYW5nZSIsInRoaXMiLCJmZXRjaENyeXB0b0luZm8iLCJmZXRjaEV4Y2hhbmdlcyIsImNyeXB0b0V4Y2hhbmdlcyIsImZldGNoR2xvYmFsIiwiY3J5cHRvR2xvYmFsIiwiZmV0Y2hTZWFyY2hUcmVuZGluZyIsImNyeXB0b1RyZW5kaW5nIiwiZmV0Y2hFeGNoYW5nZVJhdGVzIiwiY3J5cHRvRXhjaGFuZ2VSYXRlcyIsImZldGNoQ2hhcnREYXRhIiwiaWQiLCJjdXJyZW5jeSIsImRheXMiLCJyYXRlcyIsIk9iamVjdCIsImtleXMiLCJtYXAiLCJrZXkiLCJwcmljZXMiLCJsZW5ndGgiLCJkYXRhUG9pbnQiLCJEYXRlIiwiY2xhc3NOYW1lIiwic3R5bGUiLCJwYWRkaW5nIiwiYm9yZGVyUmFkaXVzIiwiYm9yZGVyIiwiY291bnRyeU5hbWUiLCJjb3VudHJ5Q29kZSIsImNvdW50cnlFbW9qaSIsIkpTT04iLCJzdHJpbmdpZnkiLCJ1bmRlZmluZWQiLCJpdGVtIiwiaSIsIndpZHRoIiwiaGVpZ2h0IiwibWFyZ2luIiwib3ZlcmZsb3ciLCJzcmMiLCJpbWFnZSIsIm5hbWUiLCJ0cmFkZV92b2x1bWVfMjRoX2J0YyIsInRyYWRlX3ZvbHVtZV8yNGhfYnRjX25vcm1hbGl6ZWQiLCJ0cnVzdF9zY29yZSIsImhyZWYiLCJ1cmwiLCJ5ZWFyX2VzdGFibGlzaGVkIiwiQ29tcG9uZW50IiwiY29ubmVjdCIsImRpc3BhdGNoIiwiYmluZEFjdGlvbkNyZWF0b3JzIiwid2l0aFJvdXRlciIsIkhpZ2hjaGFydHMiLCJ0aGVtZSIsInNldE9wdGlvbnMiLCJwZXJpb2RzIiwibGFiZWwiLCJkYXRlIiwic3RhdGljT3B0aW9ucyIsInRpdGxlIiwidGV4dCIsInRpY2tJbnRlcnZhbCIsInNlcmllcyIsIkNyeXB0b25DaGFydCIsInByb3BzIiwicGVyaW9kIiwidXNlU3RhdGUiLCJvcHRpb25zIiwidXNlRWZmZWN0Iiwib25DbGljayIsIm9uQ2hhbmdlUmFuZ2UiLCJsb2FkVGltZXJhbmdlIiwiaGlnaGNoYXJ0cyIsImFwaVJvb3QiLCJHRVQiLCJmZXRjaEhpc3RvcnkiLCJmZXRjaENvaW5zIiwibW9kdWxlIiwiZXhwb3J0cyIsImNvbG9ycyIsImNoYXJ0IiwiYmFja2dyb3VuZENvbG9yIiwiZm9udEZhbWlseSIsImNvbG9yIiwiYWxpZ24iLCJmb250V2VpZ2h0Iiwic3VidGl0bGUiLCJsZWdlbmQiLCJ2ZXJ0aWNhbEFsaWduIiwiaXRlbVN0eWxlIiwieEF4aXMiLCJncmlkTGluZUNvbG9yIiwiZ3JpZExpbmVXaWR0aCIsIm1pbm9yR3JpZExpbmVDb2xvciIsIm1pbm9HcmlkTGluZVdpZHRoIiwidGlja0NvbG9yIiwibWlub3JUaWNrQ29sb3IiLCJsaW5lQ29sb3IiLCJ5QXhpcyIsInJpZExpbmVXaWR0aCIsImlub0dyaWRMaW5lV2lkdGgiLCJwbG90T3B0aW9ucyIsImxpbmUiLCJtYXJrZXIiLCJlbmFibGVkIiwic3BsaW5lIiwiYXJlYSIsImFyZWFzcGxpbmUiLCJhcmVhcmFuZ2UiLCJidWJibGUiLCJtYXhTaXplIl0sIm1hcHBpbmdzIjoiOHlEQW1DQSxJQU1hQSxFQUFiLHVMQUNJQyxNQUFRLENBQ0pDLFVBQVcsQ0FDUEMsV0FBVyxFQUNYQyxjQUFjLEVBQ2RDLFlBQVksRUFDWkMsYUFBYSxFQUNiQyxXQUFXLEVBQ1hDLGFBQWEsR0FFakJDLEtBQU0sSUFWZCxFQWFJQyxhQUFlLFNBQUFDLEdBQ1gsRUFBS0MsU0FBUyxDQUNWQyxVQUFXRixFQUFFRyxPQUFPQyxTQWZoQyxFQXdCSUMsa0JBQW9CLFdBQ2hCQyxjQUNLQyxNQUFLLFNBQUFDLEdBQ0YsSUFBTWhCLEVBQVlnQixFQUFTQyxHQUMzQixFQUFLUixTQUFTLENBQ1ZILEtBQU0sRUFBRixHQUNHLEVBQUtSLE1BQU1RLEtBRGQsQ0FFQU4sZ0JBSVJrQixZQUFrQmxCLEdBQ2JlLE1BQUssU0FBQUMsR0FDRixFQUFLUCxTQUFTLENBQ1ZILEtBQU0sRUFBRixHQUNHLEVBQUtSLE1BQU1RLEtBRGQsQ0FFQWEsUUFBU0gsU0FJcEJJLE9BQU0sU0FBQUMsR0FDSEMsUUFBUUMsSUFBSUYsTUFFZkcsU0FBUSxXQUNMLEVBQUtmLFNBQVMsQ0FDVlYsVUFBVyxFQUFGLEdBQ0YsRUFBS0QsTUFBTUMsVUFEVCxDQUVMRSxjQUFjLFlBS2pDbUIsT0FBTSxTQUFBQyxHQUNIQyxRQUFRQyxJQUFJRixNQUVmRyxTQUFRLFdBQ0wsRUFBS2YsU0FBUyxDQUNWVixVQUFXLEVBQUYsR0FDRixFQUFLRCxNQUFNQyxVQURULENBRUxDLFdBQVcsVUEvRG5DLEVBaUtJeUIsU0FBVyxTQUFBakIsS0FqS2YsSSxVQUFBLE8sa09BQUEsTSxFQUFBLEcsRUFBQSwyQ0FvQlFrQixLQUFLYixvQkFDTGEsS0FBS0Msb0JBckJiLHdDQXFFdUIsV0FDZkMsY0FDS2IsTUFBSyxTQUFBQyxHQUNGLEVBQUtQLFNBQVMsQ0FDVkgsS0FBTSxFQUFGLEdBQ0csRUFBS1IsTUFB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QUFXLENBQ1BOLE1BQU8sWUFHZk8sTUFBTyxDQUNIQyxjQUFlLFVBQ2ZDLGNBQWUsRUFDZkMsbUJBQW9CLFVBQ3BCQyxrQkFBbUIsR0FDbkJDLFVBQVcsVUFDWEMsZUFBZ0IsVUFDaEJDLFVBQVcsV0FFZkMsTUFBTyxDQUNIUCxjQUFlLFVBQ2ZRLGFBQWMsRUFDZE4sbUJBQW9CLFVBQ3BCTyxpQkFBa0IsR0FDbEJMLFVBQVcsVUFDWEMsZUFBZ0IsVUFDaEJDLFVBQVcsV0FFZkksWUFBYSxDQUNUQyxLQUFNLENBQ0ZDLE9BQVEsQ0FDSkMsU0FBUyxJQUdqQkMsT0FBUSxDQUNKRixPQUFRLENBQ0pDLFNBQVMsSUFHakJFLEtBQU0sQ0FDRkgsT0FBUSxDQUNKQyxTQUFTLElBR2pCRyxXQUFZLENBQ1JKLE9BQVEsQ0FDSkMsU0FBUyxJQUdqQkksVUFBVyxDQUNQTCxPQUFRLENBQ0pDLFNBQVMsSUFHakJLLE9BQVEsQ0FDSkMsUUFBUyIsImZpbGUiOiJjaHVua3MvY3J5cHRvbi1kYXNoYm9hcmQuNWNmNjE3NTcuNC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vICNyZWdpb24gTW9kdWxlc1xuaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0J1xuaW1wb3J0IEZBSWNvbiBmcm9tICdyZWFjdC1mb250YXdlc29tZSdcbmltcG9ydCB7IHdpdGhSb3V0ZXIgfSBmcm9tICdyZWFjdC1yb3V0ZXInXG5pbXBvcnQgeyBjb25uZWN0IH0gZnJvbSAncmVhY3QtcmVkdXgnXG5pbXBvcnQgeyBiaW5kQWN0aW9uQ3JlYXRvcnMgfSBmcm9tICdyZWR1eCdcbi8vICNlbmRyZWdpb25cblxuLy8gI3JlZ2lvbiBDb21wb25lbnRzXG5pbXBvcnQge1xuICAgIEFzeW5jLFxuICAgIExvYWRlcixcbiAgICBMb2FkZXJUeXBlXG59IGZyb20gJ2NvbXBvbmVudHMnXG5pbXBvcnQge1xuICAgIENyeXB0b25DaGFydFxufSBmcm9tICcuLi9jaGFydCdcbi8vICNlbmRyZWdpb25cblxuLy8gI3JlZ2lvbiBNaXNjXG5pbXBvcnQgZGF0YSBmcm9tICdkZW1vL21vY2stZGF0YS8xZCdcbmltcG9ydCB7XG4gICAgZmV0Y2hJUEFkZHJlc3MsXG4gICAgZmV0Y2hDb3VudHJ5Rm9ySVBcbn0gZnJvbSAndXRpbC9hcGlzL2lwJ1xuaW1wb3J0IHtcbiAgICBmZXRjaEV4Y2hhbmdlcyxcbiAgICBmZXRjaENyeXB0b0luZGV4LFxuICAgIGZldGNoQ2hhcnREYXRhLFxuICAgIGZldGNoRXhjaGFuZ2VSYXRlcyxcbiAgICBmZXRjaE9ITEMsXG4gICAgZmV0Y2hHbG9iYWwsIGZldGNoU2VhcmNoVHJlbmRpbmdcbn0gZnJvbSAndXRpbC9hcGlzL2NyeXB0bydcbi8vICNlbmRyZWdpb25cblxuY29uc3QgbWFwU3RhdGVUb1Byb3BzID0gc3RhdGUgPT4gKHtcbn0pXG5cbmNvbnN0IG1hcEFjdGlvbnNUb1Byb3BzID0gZGlzcGF0Y2ggPT4gYmluZEFjdGlvbkNyZWF0b3JzKHtcbn0sIGRpc3BhdGNoKVxuXG5leHBvcnQgY2xhc3MgQ3J5cHRvbkRhc2hib2FyZCBleHRlbmRzIENvbXBvbmVudCB7XG4gICAgc3RhdGUgPSB7XG4gICAgICAgIGlzTG9hZGluZzoge1xuICAgICAgICAgICAgaXBBZGRyZXNzOiB0cnVlLFxuICAgICAgICAgICAgY291bnRyeUZvcklQOiB0cnVlLFxuICAgICAgICAgICAgY3J5cHRvSW5mbzogdHJ1ZSxcbiAgICAgICAgICAgIGNyeXB0b0luZGV4OiB0cnVlLFxuICAgICAgICAgICAgY2hhcnREYXRhOiB0cnVlLFxuICAgICAgICAgICAgY3J5cHRvQ29pbnM6IHRydWVcbiAgICAgICAgfSxcbiAgICAgICAgZGF0YToge31cbiAgICB9XG5cbiAgICBzZXRDaGFydFR5cGUgPSBlID0+IHtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICBjaGFydFR5cGU6IGUudGFyZ2V0LnZhbHVlXG4gICAgICAgIH0pXG4gICAgfVxuXG4gICAgY29tcG9uZW50RGlkTW91bnQgKCkge1xuICAgICAgICB0aGlzLmZldGNoTG9jYXRpb25JbmZvKClcbiAgICAgICAgdGhpcy5mZXRjaENyeXB0b0luZm8oKVxuICAgIH1cblxuICAgIGZldGNoTG9jYXRpb25JbmZvID0gKCkgPT4ge1xuICAgICAgICBmZXRjaElQQWRkcmVzcygpXG4gICAgICAgICAgICAudGhlbihyZXNwb25zZSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgaXBBZGRyZXNzID0gcmVzcG9uc2UuaXBcbiAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICAgICAgICAgICAgLi4udGhpcy5zdGF0ZS5kYXRhLFxuICAgICAgICAgICAgICAgICAgICAgICAgaXBBZGRyZXNzXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KVxuXG4gICAgICAgICAgICAgICAgZmV0Y2hDb3VudHJ5Rm9ySVAoaXBBZGRyZXNzKVxuICAgICAgICAgICAgICAgICAgICAudGhlbihyZXNwb25zZSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC4uLnRoaXMuc3RhdGUuZGF0YSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY291bnRyeTogcmVzcG9uc2VcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAuY2F0Y2goZXJyb3IgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coZXJyb3IpXG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIC5maW5hbGx5KCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzTG9hZGluZzoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuLi50aGlzLnN0YXRlLmlzTG9hZGluZyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY291bnRyeUZvcklQOiBmYWxzZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLmNhdGNoKGVycm9yID0+IHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhlcnJvcilcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuZmluYWxseSgoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICAgICAgICAgIGlzTG9hZGluZzoge1xuICAgICAgICAgICAgICAgICAgICAgICAgLi4udGhpcy5zdGF0ZS5pc0xvYWRpbmcsXG4gICAgICAgICAgICAgICAgICAgICAgICBpcEFkZHJlc3M6IGZhbHNlXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfSlcbiAgICB9XG5cbiAgICBmZXRjaENyeXB0b0luZm8gKCkge1xuICAgICAgICBmZXRjaEV4Y2hhbmdlcygpXG4gICAgICAgICAgICAudGhlbihyZXNwb25zZSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC4uLnRoaXMuc3RhdGUuZGF0YSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNyeXB0b0V4Y2hhbmdlczogcmVzcG9uc2VcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLmZpbmFsbHkoKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgICAgICAgICBpc0xvYWRpbmc6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC4uLnRoaXMuc3RhdGUuaXNMb2FkaW5nLFxuICAgICAgICAgICAgICAgICAgICAgICAgY3J5cHRvRXhjaGFuZ2VzOiBmYWxzZVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH0pXG5cbiAgICAgICAgZmV0Y2hHbG9iYWwoKVxuICAgICAgICAgICAgLnRoZW4ocmVzcG9uc2UgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAuLi50aGlzLnN0YXRlLmRhdGEsXG4gICAgICAgICAgICAgICAgICAgICAgICBjcnlwdG9HbG9iYWw6IHJlc3BvbnNlXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5maW5hbGx5KCgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgICAgICAgICAgaXNMb2FkaW5nOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAuLi50aGlzLnN0YXRlLmlzTG9hZGluZyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNyeXB0b0dsb2JhbDogZmFsc2VcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9KVxuXG4gICAgICAgIGZldGNoU2VhcmNoVHJlbmRpbmcoKVxuICAgICAgICAgICAgLnRoZW4ocmVzcG9uc2UgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAuLi50aGlzLnN0YXRlLmRhdGEsXG4gICAgICAgICAgICAgICAgICAgICAgICBjcnlwdG9UcmVuZGluZzogcmVzcG9uc2VcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLmZpbmFsbHkoKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgICAgICAgICBpc0xvYWRpbmc6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC4uLnRoaXMuc3RhdGUuaXNMb2FkaW5nLFxuICAgICAgICAgICAgICAgICAgICAgICAgY3J5cHRvVHJlbmRpbmc6IGZhbHNlXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfSlcblxuICAgICAgICBmZXRjaEV4Y2hhbmdlUmF0ZXMoKVxuICAgICAgICAgICAgLnRoZW4ocmVzcG9uc2UgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAuLi50aGlzLnN0YXRlLmRhdGEsXG4gICAgICAgICAgICAgICAgICAgICAgICBjcnlwdG9FeGNoYW5nZVJhdGVzOiByZXNwb25zZVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuZmluYWxseSgoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICAgICAgICAgIGlzTG9hZGluZzoge1xuICAgICAgICAgICAgICAgICAgICAgICAgLi4udGhpcy5zdGF0ZS5pc0xvYWRpbmcsXG4gICAgICAgICAgICAgICAgICAgICAgICBjcnlwdG9FeGNoYW5nZVJhdGVzOiBmYWxzZVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH0pXG5cbiAgICAgICAgZmV0Y2hDaGFydERhdGEoeyBpZDogJ2JpdGNvaW4nLCBjdXJyZW5jeTogJ3VzZCcsIGRheXM6IDcgfSlcbiAgICAgICAgICAgIC50aGVuKHJlc3BvbnNlID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICAgICAgICAgICAgLi4udGhpcy5zdGF0ZS5kYXRhLFxuICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnREYXRhOiByZXNwb25zZVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuZmluYWxseSgoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICAgICAgICAgIGlzTG9hZGluZzoge1xuICAgICAgICAgICAgICAgICAgICAgICAgLi4udGhpcy5zdGF0ZS5pc0xvYWRpbmcsXG4gICAgICAgICAgICAgICAgICAgICAgICBjaGFydERhdGE6IGZhbHNlXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfSlcbiAgICB9XG5cbiAgICBvbkNoYW5nZSA9IGUgPT4ge1xuICAgIH1cblxuICAgIHJlbmRlciAoKSB7XG4gICAgICAgIGNvbnN0IHsgaXNMb2FkaW5nLCBkYXRhIH0gPSB0aGlzLnN0YXRlXG4gICAgICAgIGNvbnN0IGtleXMgPSBkYXRhICYmIGRhdGEuY3J5cHRvRXhjaGFuZ2VSYXRlcz8ucmF0ZXMgPyBPYmplY3Qua2V5cyhkYXRhPy5jcnlwdG9FeGNoYW5nZVJhdGVzLnJhdGVzKSA6IFtdXG4gICAgICAgIGNvbnN0IGl0ZW1zID0ga2V5cy5tYXAoa2V5ID0+ICh7IGlkOiBrZXksIGtleSwgLi4uZGF0YT8uY3J5cHRvRXhjaGFuZ2VSYXRlcy5yYXRlc1trZXldIH0pKVxuXG4gICAgICAgIGNvbnN0IGNoYXJ0RGF0YSA9IGRhdGE/LmNoYXJ0RGF0YT8ucHJpY2VzPy5sZW5ndGggPiAwXG4gICAgICAgICAgICA/IGRhdGEuY2hhcnREYXRhLnByaWNlcy5tYXAoZGF0YVBvaW50ID0+IChbbmV3IERhdGUoZGF0YVBvaW50WzBdKSwgZGF0YVBvaW50WzFdXSkpXG4gICAgICAgICAgICA6IFsxLCAyLCAzXVxuXG4gICAgICAgIHJldHVybiA8ZGl2IGNsYXNzTmFtZT0ncGFnZSBkYXJrJz5cbiAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgPGgxPkNyeXB0b24gRGFzaGJvYXJkPC9oMT5cbiAgICAgICAgICAgICAgICA8QXN5bmMgaXNMb2FkaW5nPXsgaXNMb2FkaW5nLmlwQWRkcmVzcyB9PlxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0nY2FyZCBmbGV4LXJvdyBzcGFjZS1iZXR3ZWVuJyBzdHlsZT17eyBwYWRkaW5nOiAnMXJlbScsIGJvcmRlclJhZGl1czogJzZweCcsIGJvcmRlcjogJzFweCBzb2xpZCByZ2JhKGdyZXksIDAuNSknIH19PlxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdj5JUDogPHN0cm9uZz57ZGF0YS5pcEFkZHJlc3N9PC9zdHJvbmc+PC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICA8QXN5bmMgaXNMb2FkaW5nPXsgaXNMb2FkaW5nLmNvdW50cnkgfT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0nZmxleC1yb3cgc3BhY2UtYmV0d2Vlbic+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXY+eyBkYXRhLmNvdW50cnk/LmNvdW50cnlOYW1lIH08L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdj4oeyBkYXRhLmNvdW50cnk/LmNvdW50cnlDb2RlIH0pPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXY+eyBkYXRhLmNvdW50cnk/LmNvdW50cnlFbW9qaSB9PC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L0FzeW5jPlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgPEFzeW5jIGlzTG9hZGluZz17IGlzTG9hZGluZy5jaGFydERhdGEgfT5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxDcnlwdG9uQ2hhcnQgZGF0YT17Y2hhcnREYXRhIHx8IFtdfSAvPlxuICAgICAgICAgICAgICAgICAgICA8L0FzeW5jPlxuICAgICAgICAgICAgICAgIDwvQXN5bmM+XG4gICAgICAgICAgICAgICAgey8qXG4gICAgICAgICAgICAgICAgPEFzeW5jIGlzTG9hZGluZz17IGlzTG9hZGluZy5jcnlwdG9HbG9iYWwgfT5cbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgKGRhdGE/LmNyeXB0b0dsb2JhbCB8fCBbXSkubWFwKChjb2luLCBpKSA9PiAoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9J2NvaW4nIGtleT17aX0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtjb2luLm5hbWV9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICApKVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgPC9Bc3luYz5cbiAgICAgICAgICAgICAgICAqL31cbiAgICAgICAgICAgICAgICB7LypcbiAgICAgICAgICAgICAgICA8QXN5bmMgaXNMb2FkaW5nPXsgaXNMb2FkaW5nLmNyeXB0b1RyZW5kaW5nIH0+XG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIChkYXRhPy5jcnlwdG9UcmVuZGluZyB8fCBbXSkubWFwKChjb2luLCBpKSA9PiAoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9J2NvaW4nIGtleT17aX0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtjb2luLm5hbWV9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICApKVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgPC9Bc3luYz5cbiAgICAgICAgICAgICAgICAqL31cbiAgICAgICAgICAgICAgICA8QXN5bmMgaXNMb2FkaW5nPXsgaXNMb2FkaW5nLmNyeXB0b0V4Y2hhbmdlcyB9PlxuICAgICAgICAgICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICAgICAgICBDcnlwdG9FeGNoYW5nZXM6IDxzdHJvbmc+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHByZT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeyBKU09OLnN0cmluZ2lmeShkYXRhLmNyeXB0b0V4Y2hhbmdlcywgdW5kZWZpbmVkLCAyKX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3ByZT5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Ryb25nPlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9J2ZsZXgtcm93IGZsZXgtd3JhcCc+XG4gICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YT8uY3J5cHRvRXhjaGFuZ2VzPy5tYXAoKGl0ZW0sIGkpID0+IDxkaXYga2V5PXsgYGNyeXB0b0N1cnJlbmN5LSR7aX1gIH0gY2xhc3NOYW1lPSdjYXJkIHBhZGRlZCdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9e3tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJvcmRlcjogJzFweCBzb2xpZCByZ2JhKGdyZXksIDAuNSknLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6ICcxNnJlbScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6ICc4cmVtJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hcmdpbjogJzAuNXJlbScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvdmVyZmxvdzogJ2hpZGRlbidcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfX0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPSdmbGV4LXJvdyBzcGFjZS1iZXR3ZWVuJz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3R5bGU9e3tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogJzRyZW0nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogJ2F1dG8nXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3JjPXsgaXRlbS5pbWFnZSB9Lz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsvKiA8ZGl2IHN0eWxlPXt7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9udFNpemU6ICcxLjJyZW0nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvbnRXZWlnaHQ6ICdib2xkJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfX0+eyBpdGVtPy5pZD8udG9VcHBlckNhc2UoKSB9PC9kaXY+ICovfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdj57IGl0ZW0ubmFtZSB9PC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnIgLz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9J2ZsZXgtcm93Jz5cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdj57IGl0ZW0uY291bnRyeSB9PC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXY+eyBpdGVtLnRyYWRlX3ZvbHVtZV8yNGhfYnRjIH08L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdj57IGl0ZW0udHJhZGVfdm9sdW1lXzI0aF9idGNfbm9ybWFsaXplZCB9PC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXY+eyBpdGVtLnRydXN0X3Njb3JlIH08LyBkaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXY+eyBpdGVtLmNvdW50cnkgfTwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPXsgaXRlbS51cmwgfSB0YXJnZXQ9J19ibGFuayc+eyBpdGVtLnVybCB9PC9hPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2PkVzdGFibGlzaGVkOiB7IGl0ZW0ueWVhcl9lc3RhYmxpc2hlZCB9PC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+KVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgey8qIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtcy5tYXAoKGl0ZW0sIGkpID0+IDxkaXYga2V5PXsgYGNyeXB0b0N1cnJlbmN5LSR7aX1gIH0gY2xhc3NOYW1lPSdjYXJkIHBhZGRlZCdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9e3tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJvcmRlcjogJzFweCBzb2xpZCBsaWdodGdyZXknLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6ICcxNnJlbScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6ICc4cmVtJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hcmdpbjogJzAuNXJlbSdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfX0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPSdmbGV4LXJvdyBzcGFjZS1iZXR3ZWVuJz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgc3R5bGU9e3tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb250U2l6ZTogJzEuMnJlbScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9udFdlaWdodDogJ2JvbGQnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9fT57IGl0ZW0ua2V5LnRvVXBwZXJDYXNlKCkgfTwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdj57IGl0ZW0ubmFtZSB9PC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnIgLz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdj48c3Ryb25nPntpdGVtLnVuaXR9IHsgaXRlbS52YWx1ZS50b0xvY2FsZVN0cmluZygnZW4tVVMnLCB7IG1heGltdW1GcmFjdGlvbkRpZ2l0czogMiB9KSB9PC9zdHJvbmc+PC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxiciAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2PnsgaXRlbS50eXBlIH08L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4pXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YT8uY3J5cHRvSW5kZXg/Lm1hcCgoaXRlbSwgaSkgPT4gPGRpdiBrZXk9e2BjcnlwdG9DdXJyZW5jeS0ke2l9YH0gY2xhc3NOYW1lPSdjYXJkIHBhZGRlZCdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9e3tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJvcmRlcjogJzFweCBzb2xpZCBsaWdodGdyZXknLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6ICcxNnJlbScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6ICc4cmVtJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hcmdpbjogJzAuNXJlbSdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfX0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXY+eyBpdGVtLmlkIH08L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdj48Yj5yYW5rOjwvYj4geyBpdGVtLnJhbmsgfTwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2PjxiPnN5bWJvbDo8L2I+IHsgaXRlbS5zeW1ib2wgfTwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2PjxiPmlzX25ldzo8L2I+IHsgaXRlbS5pc19uZXcgPyAnWUVTJyA6ICdOTycgfTwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2PjxiPmlzX2FjdGl2ZTo8L2I+IHsgaXRlbS5pc19hY3RpdmUgPyAnWUVTJyA6ICdOTycgfTwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2PjxiPnR5cGU6PC9iPiB7IGl0ZW0udHlwZSB9PC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+KVxuICAgICAgICAgICAgICAgICAgICAgICAgfSAqL31cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPC9Bc3luYz5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNvbm5lY3QobWFwU3RhdGVUb1Byb3BzLCBtYXBBY3Rpb25zVG9Qcm9wcykod2l0aFJvdXRlcihDcnlwdG9uRGFzaGJvYXJkKSlcbiIsIi8vICNyZWdpb24gTW9kdWxlc1xuaW1wb3J0IFJlYWN0LCB7XG4gICAgdXNlU3RhdGUsXG4gICAgdXNlRWZmZWN0XG59IGZyb20gJ3JlYWN0J1xuaW1wb3J0IEhpZ2hjaGFydHMgZnJvbSAnaGlnaGNoYXJ0cydcbmltcG9ydCBIaWdoY2hhcnRzUmVhY3QgZnJvbSAnaGlnaGNoYXJ0cy1yZWFjdC1vZmZpY2lhbCdcbmltcG9ydCB0aGVtZSBmcm9tICcuL2NoYXJ0L3RoZW1lJ1xuLy8gI2VuZHJlZ2lvblxuXG4vLyAjcmVnaW9uIENvbXBvbmVudHNcbmltcG9ydCB7XG4gICAgQXN5bmNcbn0gZnJvbSAnY29tcG9uZW50cydcbi8vICNlbmRyZWdpb25cblxuLy8gI3JlZ2lvbiBBc3NldHMgJiBEYXRhXG5IaWdoY2hhcnRzLnRoZW1lID0gdGhlbWVcbkhpZ2hjaGFydHMuc2V0T3B0aW9ucyhIaWdoY2hhcnRzLnRoZW1lKVxuXG5jb25zdCBtaWxsaXNlY29uZHNUb0RheXMgPSAxMDAwICogNjAgKiA2MCAqIDI0XG5cbmNvbnN0IHBlcmlvZHMgPSBbXG4gICAge1xuICAgICAgICBsYWJlbDogJ1knLFxuICAgICAgICBkYXlzOiAzNjUsXG4gICAgICAgIGRhdGU6IG5ldyBEYXRlKCkgLSAzNjUgKiBtaWxsaXNlY29uZHNUb0RheXNcbiAgICB9LFxuICAgIHtcbiAgICAgICAgbGFiZWw6ICdNJyxcbiAgICAgICAgZGF5czogMzAsXG4gICAgICAgIGRhdGU6IG5ldyBEYXRlKCkgLSAzMCAqIG1pbGxpc2Vjb25kc1RvRGF5c1xuICAgIH0sXG4gICAge1xuICAgICAgICBsYWJlbDogJ1cnLFxuICAgICAgICBkYXlzOiA3LFxuICAgICAgICBkYXRlOiBuZXcgRGF0ZSgpIC0gNyAqIG1pbGxpc2Vjb25kc1RvRGF5c1xuICAgIH0sXG4gICAge1xuICAgICAgICBsYWJlbDogJ0QnLFxuICAgICAgICBkYXlzOiAxLFxuICAgICAgICBkYXRlOiBuZXcgRGF0ZSgpIC0gMSAqIG1pbGxpc2Vjb25kc1RvRGF5c1xuICAgIH0sXG4gICAge1xuICAgICAgICBsYWJlbDogJ0gnLFxuICAgICAgICBkYXlzOiAwLFxuICAgICAgICBkYXRlOiBuZXcgRGF0ZSgpIC0gMzYwMCAqIDEwMDBcbiAgICB9XG5dXG5jb25zdCBzdGF0aWNPcHRpb25zID0ge1xuICAgIHRpdGxlOiB7XG4gICAgICAgIHRleHQ6ICdDcnlwdG9uQ2hhcnQnXG4gICAgfSxcbiAgICB0aGVtZToge1xuXG4gICAgfSxcbiAgICAvLyBjaGFydDoge1xuICAgIC8vICAgICB0eXBlOiAnc3BsaW5lJ1xuICAgIC8vIH0sXG4gICAgLy8gMSB5ZWFyXG4gICAgdGlja0ludGVydmFsOiAxMDAwICogNjAgKiA2MCAqIDI0LFxuICAgIHNlcmllczogWycxJywgJzInLCAnMyddXG59XG4vLyAjZW5kcmVnaW9uXG5cbmV4cG9ydCBjb25zdCBDcnlwdG9uQ2hhcnQgPSAocHJvcHMpID0+IHtcbiAgICBjb25zdCB7XG4gICAgICAgIGRhdGEsXG4gICAgICAgIHNlcmllcyxcbiAgICAgICAgdGl0bGUsXG4gICAgICAgIHBlcmlvZCxcbiAgICAgICAgaXNMb2FkaW5nXG4gICAgfSA9IHByb3BzXG5cbiAgICBjb25zdCBbb3B0aW9ucywgc2V0T3B0aW9uc10gPSB1c2VTdGF0ZSh7XG4gICAgICAgIC4uLnN0YXRpY09wdGlvbnNcbiAgICB9KVxuXG4gICAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICAgICAgc2V0T3B0aW9ucyh7XG4gICAgICAgICAgICAuLi5zdGF0aWNPcHRpb25zLFxuICAgICAgICAgICAgc2VyaWVzLFxuICAgICAgICAgICAgdGl0bGU6IHtcbiAgICAgICAgICAgICAgICB0ZXh0OiB0aXRsZVxuICAgICAgICAgICAgfVxuICAgICAgICB9KVxuICAgIH0sIFtkYXRhLCBzZXJpZXNdKVxuXG4gICAgY29uc3QgbG9hZFRpbWVyYW5nZSA9IChwZXJpb2QpID0+IHtcbiAgICAgICAgcHJvcHMub25DaGFuZ2VSYW5nZT8uKHBlcmlvZClcbiAgICB9XG5cbiAgICByZXR1cm4gKFxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT0nY2FyZCcgc3R5bGU9e3tcbiAgICAgICAgICAgIHdpZHRoOiAnY2FsYygxMDAlIC0gMnJlbSknLFxuICAgICAgICAgICAgbWFyZ2luOiAnMXJlbScsXG4gICAgICAgICAgICBib3JkZXJSYWRpdXM6ICc4cHgnXG4gICAgICAgIH19PlxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9J2ZsZXgtcm93Jz5cbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIChwZXJpb2RzIHx8IFtdKS5tYXAoKGl0ZW0sIGkpID0+IChcbiAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24ga2V5PXtpfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17YGhvbGxvdyAke3BlcmlvZC5sYWJlbCA9PT0gaXRlbS5sYWJlbCA/ICdwcmltYXJ5JyA6ICcnfWB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DbGljaz17ICgpID0+IGxvYWRUaW1lcmFuZ2UoaXRlbSl9PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsgaXRlbT8ubGFiZWwgfHwgJ1gnfVxuICAgICAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICAgICAgICAgICkpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8QXN5bmMgaXNMb2FkaW5nPXsgaXNMb2FkaW5nIH0+XG4gICAgICAgICAgICAgICAgPEhpZ2hjaGFydHNSZWFjdFxuICAgICAgICAgICAgICAgICAgICBoaWdoY2hhcnRzPXtIaWdoY2hhcnRzfVxuICAgICAgICAgICAgICAgICAgICBvcHRpb25zPXtvcHRpb25zfVxuICAgICAgICAgICAgICAgICAgICAvLyBjb25zdHJ1Y3RvclR5cGU9J3N0b2NrQ2hhcnQnXG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDwvQXN5bmM+XG4gICAgICAgIDwvZGl2PlxuICAgIClcbn1cblxuZXhwb3J0IGRlZmF1bHQgQ3J5cHRvbkNoYXJ0XG4iLCIvLyBodHRwczovL3JhcGlkYXBpLmNvbS9jb2luZ2Vja28vYXBpL2NvaW5nZWNrbz9lbmRwb2ludD1hcGllbmRwb2ludF9mNTkwN2NhZC1hNThiLTQ1MzgtYWY1OC0xMWQwNzIzMTk3NWNcbmltcG9ydCB7IEdFVCB9IGZyb20gJy4vY29yZSdcblxuY29uc3QgYXBpUm9vdCA9ICdodHRwczovL2FwaS5jb2luZ2Vja28uY29tL2FwaS92MydcblxuZXhwb3J0IGNvbnN0IGZldGNoR2xvYmFsID0gYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IHVybCA9IGAke2FwaVJvb3R9L2dsb2JhbGBcbiAgICByZXR1cm4gYXdhaXQgR0VUKHVybClcbn1cblxuZXhwb3J0IGNvbnN0IGZldGNoU2VhcmNoVHJlbmRpbmcgPSBhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgdXJsID0gYCR7YXBpUm9vdH0vc2VhcmNoL3RyZW5kaW5nYFxuICAgIHJldHVybiBhd2FpdCBHRVQodXJsKVxufVxuXG5leHBvcnQgY29uc3QgZmV0Y2hFeGNoYW5nZVJhdGVzID0gYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IHVybCA9IGAke2FwaVJvb3R9L2V4Y2hhbmdlX3JhdGVzYFxuICAgIHJldHVybiBhd2FpdCBHRVQodXJsKVxufVxuXG5leHBvcnQgY29uc3QgZmV0Y2hDcnlwdG9JbmRleCA9IGFzeW5jIChpZCA9ICcnKSA9PiB7XG4gICAgY29uc3QgdXJsID0gYCR7YXBpUm9vdH0vY29pbnMke2lkPy5sZW5ndGggPiAwID8gYC8ke2lkfWAgOiAnJ31gXG4gICAgcmV0dXJuIGF3YWl0IEdFVCh1cmwpXG59XG5cbmV4cG9ydCBjb25zdCBmZXRjaEV4Y2hhbmdlcyA9IGFzeW5jIChpZCA9ICcnKSA9PiB7XG4gICAgY29uc3QgdXJsID0gYCR7YXBpUm9vdH0vZXhjaGFuZ2VzJHtpZD8ubGVuZ3RoID4gMCA/IGAvJHtpZH1gIDogJyd9YFxuICAgIHJldHVybiBhd2FpdCBHRVQodXJsKVxufVxuXG5leHBvcnQgY29uc3QgZmV0Y2hDaGFydERhdGEgPSBhc3luYyAoeyBpZCwgY3VycmVuY3ksIGRheXMgfSkgPT4ge1xuICAgIGNvbnN0IHVybCA9IGAke2FwaVJvb3R9L2NvaW5zLyR7aWR9L21hcmtldF9jaGFydD92c19jdXJyZW5jeT0ke2N1cnJlbmN5fSZkYXlzPSR7ZGF5c31gXG4gICAgcmV0dXJuIGF3YWl0IEdFVCh1cmwpXG59XG5cbmV4cG9ydCBjb25zdCBmZXRjaEhpc3RvcnkgPSBhc3luYyAoaWQgPSAnYml0Y29pbicpID0+IHtcbiAgICBjb25zdCB1cmwgPSBgJHthcGlSb290fS9jb2lucy8ke2lkfS9oaXN0b3J5P2RhdGU9JHsnMDEtMDEtMjAyMCd9YFxuICAgIHJldHVybiBhd2FpdCBHRVQodXJsKVxufVxuXG5leHBvcnQgY29uc3QgZmV0Y2hDb2lucyA9IGFzeW5jIChpZCA9ICcnKSA9PiB7XG4gICAgY29uc3QgdXJsID0gYCR7YXBpUm9vdH0vY29pbnMke2lkPy5sZW5ndGggPiAwID8gYC8ke2lkfWAgOiAnJ31gXG4gICAgcmV0dXJuIGF3YWl0IEdFVCh1cmwpXG59XG5cbmV4cG9ydCBjb25zdCBmZXRjaENvaW5zTGlzdCA9IGFzeW5jICgpID0+IHtcbiAgICBjb25zdCB1cmwgPSBgJHthcGlSb290fS9jb2lucy9saXN0YFxuICAgIHJldHVybiBhd2FpdCBHRVQodXJsKVxufVxuXG5leHBvcnQgY29uc3QgZmV0Y2hDb2luc01hcmtldCA9IGFzeW5jICgpID0+IHtcbiAgICBjb25zdCB1cmwgPSBgJHthcGlSb290fS9jb2lucy9tYXJrZXRgXG4gICAgcmV0dXJuIGF3YWl0IEdFVCh1cmwpXG59XG5cbmV4cG9ydCBjb25zdCBmZXRjaE9ITEMgPSBhc3luYyAoaWQgPSAnYml0Y29pbicpID0+IHtcbiAgICBjb25zdCB1cmwgPSBgJHthcGlSb290fS9jb2lucy8ke2lkfS9vaGxjYFxuICAgIHJldHVybiBhd2FpdCBHRVQodXJsKVxufVxuXG5jb25zb2xlLmxvZyhmZXRjaEhpc3RvcnkoJ2JpdGNvaW4nKSlcbiIsIi8vIDIwMjAxMDI4MjMzOTM2XG4vLyBodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vamJrdW5zdC9oaWdoY2hhcnRzLXRoZW1lcy1jb2xsZWN0aW9uL2doLXBhZ2VzL3RoZW1lcy9hbG9uZS5qc1xubW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgY29sb3JzOiBbXG4gICAgICAgICcjMDBhZGVlJyxcbiAgICAgICAgJyMyOTgwYjknLFxuICAgICAgICAnIzJlY2M3MScsXG4gICAgICAgICcjMzQ5OWFkJyxcbiAgICAgICAgJyMyYzNlNTAnLFxuICAgICAgICAnIzAzYWVkZCdcbiAgICBdLFxuICAgIGNoYXJ0OiB7XG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogJyMxRDFEMUQnLFxuICAgICAgICBzdHlsZToge1xuICAgICAgICAgICAgZm9udEZhbWlseTogJ1JvYm90bycsXG4gICAgICAgICAgICBjb2xvcjogJyM2NjY2NjYnXG4gICAgICAgIH1cbiAgICB9LFxuICAgIHRpdGxlOiB7XG4gICAgICAgIGFsaWduOiAnbGVmdCcsXG4gICAgICAgIHN0eWxlOiB7XG4gICAgICAgICAgICBmb250RmFtaWx5OiAnUm9ib3RvIENvbmRlbnNlZCcsXG4gICAgICAgICAgICBmb250V2VpZ2h0OiAnYm9sZCdcbiAgICAgICAgfVxuICAgIH0sXG4gICAgc3VidGl0bGU6IHtcbiAgICAgICAgYWxpZ246ICdsZWZ0JyxcbiAgICAgICAgc3R5bGU6IHtcbiAgICAgICAgICAgIGZvbnRGYW1pbHk6ICdSb2JvdG8gQ29uZGVuc2VkJ1xuICAgICAgICB9XG4gICAgfSxcbiAgICBsZWdlbmQ6IHtcbiAgICAgICAgYWxpZ246ICdyaWdodCcsXG4gICAgICAgIHZlcnRpY2FsQWxpZ246ICdib3R0b20nLFxuICAgICAgICBpdGVtU3R5bGU6IHtcbiAgICAgICAgICAgIGNvbG9yOiAnIzQyNDI0MidcbiAgICAgICAgfVxuICAgIH0sXG4gICAgeEF4aXM6IHtcbiAgICAgICAgZ3JpZExpbmVDb2xvcjogJyM0MjQyNDInLFxuICAgICAgICBncmlkTGluZVdpZHRoOiAxLFxuICAgICAgICBtaW5vckdyaWRMaW5lQ29sb3I6ICcjNDI0MjQyJyxcbiAgICAgICAgbWlub0dyaWRMaW5lV2lkdGg6IDAuNSxcbiAgICAgICAgdGlja0NvbG9yOiAnIzQyNDI0MicsXG4gICAgICAgIG1pbm9yVGlja0NvbG9yOiAnIzQyNDI0MicsXG4gICAgICAgIGxpbmVDb2xvcjogJyM0MjQyNDInXG4gICAgfSxcbiAgICB5QXhpczoge1xuICAgICAgICBncmlkTGluZUNvbG9yOiAnIzQyNDI0MicsXG4gICAgICAgIHJpZExpbmVXaWR0aDogMSxcbiAgICAgICAgbWlub3JHcmlkTGluZUNvbG9yOiAnIzQyNDI0MicsXG4gICAgICAgIGlub0dyaWRMaW5lV2lkdGg6IDAuNSxcbiAgICAgICAgdGlja0NvbG9yOiAnIzQyNDI0MicsXG4gICAgICAgIG1pbm9yVGlja0NvbG9yOiAnIzQyNDI0MicsXG4gICAgICAgIGxpbmVDb2xvcjogJyM0MjQyNDInXG4gICAgfSxcbiAgICBwbG90T3B0aW9uczoge1xuICAgICAgICBsaW5lOiB7XG4gICAgICAgICAgICBtYXJrZXI6IHtcbiAgICAgICAgICAgICAgICBlbmFibGVkOiBmYWxzZVxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBzcGxpbmU6IHtcbiAgICAgICAgICAgIG1hcmtlcjoge1xuICAgICAgICAgICAgICAgIGVuYWJsZWQ6IGZhbHNlXG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGFyZWE6IHtcbiAgICAgICAgICAgIG1hcmtlcjoge1xuICAgICAgICAgICAgICAgIGVuYWJsZWQ6IGZhbHNlXG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGFyZWFzcGxpbmU6IHtcbiAgICAgICAgICAgIG1hcmtlcjoge1xuICAgICAgICAgICAgICAgIGVuYWJsZWQ6IGZhbHNlXG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGFyZWFyYW5nZToge1xuICAgICAgICAgICAgbWFya2VyOiB7XG4gICAgICAgICAgICAgICAgZW5hYmxlZDogZmFsc2VcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgYnViYmxlOiB7XG4gICAgICAgICAgICBtYXhTaXplOiAnMTAlJ1xuICAgICAgICB9XG4gICAgfVxufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==