(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{1126:function(e,t,n){"use strict";n.r(t),n.d(t,"Slideshows",(function(){return I}));var a=n(0),r=n.n(a),l=n(6),i=n.n(l),c=n(5),s=n(67),o=n(35),u=(n(108),n(241)),d=n(9),m=n(242),p=n(1160),h=n.n(p),f=n(1161),v=n.n(f),E=function(e){return r.a.createElement("div",{className:"padded flex-row",style:{position:"relative",height:"calc(100vh - 6rem)"}},r.a.createElement("div",{id:"guide"},r.a.createElement("h4",null,"1. Add a Slideshow"),r.a.createElement("p",{className:"padded"},"First you'll want to create a Slideshow, to present your visualisations.",r.a.createElement("br",null),"You can also add the Slideshow to an existing Collection, or create a new one."),r.a.createElement("img",{src:h.a,className:"help-gif padded"}),r.a.createElement("div",{className:"section-end"}),r.a.createElement("h4",null,"2. Edit a Slideshow"),r.a.createElement("p",{className:"padded"},"Once you've created a Slideshow, you will can modify some data.",r.a.createElement("br",null),"Click on the Slideshow in the explorer on the left panel.",r.a.createElement("br",null),'To add slides click "Edit" in the right panel.'),r.a.createElement("div",{className:"section-end"}),r.a.createElement("img",{src:v.a,className:"help-gif padded"}),r.a.createElement("h4",null,"3. Share a Slideshow"),r.a.createElement("p",{className:"padded"},"You can share a Slideshow in various ways",r.a.createElement("br",null),"Create a public (or private) link to share with peers.",r.a.createElement("br",null),"Export it as a PDF (live apps won't reflect)",r.a.createElement("br",null),"Cast the Slideshow to a ",r.a.createElement(m.b,{to:"/slides/screens/"},"Screen")," directly, or via a ",r.a.createElement(m.b,{to:"/slides/schedules/"},"Schedule")),r.a.createElement("img",{src:v.a,className:"help-gif padded"}),r.a.createElement("div",{className:"section-end"})),r.a.createElement(d.i,{headerQuery:"#guide>h4",footerQuery:"#guide>.section-end"}))},y=n(1141);n(83);function w(e,t,n,a,r,l,i){try{var c=e[l](i),s=c.value}catch(e){return void n(e)}c.done?t(s):Promise.resolve(s).then(a,r)}function g(e){return function(){var t=this,n=arguments;return new Promise((function(a,r){var l=e.apply(t,n);function i(e){w(l,a,r,i,c,"next",e)}function c(e){w(l,a,r,i,c,"throw",e)}i(void 0)}))}}var b=function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)};b.findSlideshows=function(){var e=g(regeneratorRuntime.mark((function e(t){var n,a;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return n=t.id,a=t.query,e.next=3,y.a.GETResource({appName:"slides",resource:"slideshows",id:n,query:a});case 3:return e.abrupt("return",e.sent);case 4:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}(),b.createSlideshow=function(){var e=g(regeneratorRuntime.mark((function e(t){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,y.a.POSTResource({appName:"slides",resource:"slideshows",data:t});case 2:return e.abrupt("return",e.sent);case 3:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}(),b.updateSlideshow=function(){var e=g(regeneratorRuntime.mark((function e(t,n){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,y.a.PATCHResource({appName:"slides",resource:"slideshows",id:t,data:n});case 2:return e.abrupt("return",e.sent);case 3:case"end":return e.stop()}}),e)})));return function(t,n){return e.apply(this,arguments)}}(),b.deleteSlideshow=function(){var e=g(regeneratorRuntime.mark((function e(t){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,y.a.DELETEResource({appName:"slides",resource:"slideshows",id:t});case 2:return e.abrupt("return",e.sent);case 3:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}();var S=b,O=n(82);n(25);function k(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}var N=function(){function e(t,n){var a=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),speechSynthesis.onvoiceschanged=function(){a.voices=speechSynthesis.getVoices(),a.voice=a.setVoice(t,n)},setTimeout((function(){a.voices}),1e3),this.statements=[]}var t,n,a;return t=e,(n=[{key:"selectVoice",value:function(e,t){var n=this.voices.filter((function(t){return t.lang===e&&t.name.toLowerCase().includes("female")})).pop();return console.log(n),n}},{key:"setVoice",value:function(e,t){return this.voices.filter((function(n){return n.lang===e&&n.voiceURI===t})).pop()}},{key:"say",value:function(e){var t=this,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;console.log("saying: ",e),this.speaker=new SpeechSynthesisUtterance,this.speaker.text=e,this.speaker.voice=this.voice,console.log("utterance: ",this.speaker),this.speaker.onend=function(e){console.log("done!"),t.statements=t.statements.slice(1),t.statements.length&&setTimeout((function(){return t.say(t.statements[0])}),1e3*n)},speechSynthesis.speak(this.speaker)}},{key:"clearTalk",value:function(){this.speechArray=[]}},{key:"giveTalk",value:function(){this.say(this.statements[0])}},{key:"addStatement",value:function(e){this.statements.push(e)}},{key:"cancel",value:function(){this.speechArray=[],speechSynthesis.cancel()}}])&&k(t.prototype,n),a&&k(t,a),e}();var x=n(107),R=function(e){return e?Array.isArray(e)?Array.isArray(e)&&0===e.length?{slides:e,error:"getSlidesSpecs(slides): slides is empty []"}:{slidesCount:(e||[]).length,tilesCount:T(e||[]),duration:j(e||[])}:{slides:e,error:"getSlidesSpecs(slides): slides is not an array"}:{slides:e,error:"getSlidesSpecs(slides): slides is undefined or null"}},j=function(e){if(!e)return{slides:e,error:"getDuration(slides): slides is undefined or null"};if(!Array.isArray(e))return{slides:e,error:"getDuration(slides): slides is not an array"};if(Array.isArray(e)&&0===e.length)return 0;var t=0;return e.forEach((function(e){e.duration&&(t+=e.duration)})),t},T=function(e){if(!e)return{slides:e,error:"getTilesCount(slides): slides is undefined or null"};if(!Array.isArray(e))return{slides:e,error:"getTilesCount(slides): slides is not an array"};if(Array.isArray(e)&&0===e.length)return 0;var t=0;return e.forEach((function(e){e.tiles&&(t+=e.tiles.length)})),t},C="Slideshows",A="layer-group";function P(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function D(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?P(Object(n),!0).forEach((function(t){U(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):P(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function U(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function L(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if(!(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e)))return;var n=[],a=!0,r=!1,l=void 0;try{for(var i,c=e[Symbol.iterator]();!(a=(i=c.next()).done)&&(n.push(i.value),!t||n.length!==t);a=!0);}catch(e){r=!0,l=e}finally{try{a||null==c.return||c.return()}finally{if(r)throw l}}return n}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}new N("en-US","Samantha");var I=function(e){var t=L(Object(a.useState)(!0),2),n=t[0],l=t[1],c=L(Object(a.useState)({}),2),s=c[0],o=c[1],m=L(Object(a.useState)([]),2),p=m[0],h=m[1],f=L(Object(a.useState)([]),2),v=f[0],w=(f[1],L(Object(a.useState)(!0),2)),g=w[0],b=w[1],O=L(Object(a.useState)(null),2),k=(O[0],O[1]),N=L(Object(a.useState)(!1),2),j=N[0],T=N[1],P=L(Object(a.useState)(Object(x.a)("New Slides")),2),U=P[0],I=P[1],V=L(Object(a.useState)(""),2),_=(V[0],V[1]),G=L(Object(a.useState)(null),2),H=G[0],Y=G[1],q=L(Object(a.useState)(null),2),z=q[0],F=q[1],J=Object(a.useRef)(null),M=Object.keys(s).length>0;Object(a.useEffect)((function(){te()}),[]);var Q=function(e){var t=e.target.value;I(t),o(D({},s,{name:t}))},B=function(e,t){return function(){F(t.id),k(e)}},K={marginBottom:"0.5em"},W=R(s.slides),X=W.slidesCount,Z=W.tilesCount,$=W.duration,ee=function(e){return function(){T(!0),Y(e)}},te=function(){l(!0),S.findSlideshows({}).then((function(e){var t=e.data.map((function(e){return D({},e,{id:e._id})}));h(t),l(!1)})).catch(y.a.handleError(e.addToast))};return r.a.createElement("div",{className:"page"},r.a.createElement(d.o,{isRightDark:!M,leftDiv:r.a.createElement("div",null,r.a.createElement("div",{className:"page-header padded flex-row space-between"},r.a.createElement("div",{className:"flex-row auto-scroll-x"},r.a.createElement(i.a,{className:"icon",name:A}),r.a.createElement("br",null),r.a.createElement("div",{className:"title"},C)),r.a.createElement("div",null,r.a.createElement("button",{className:"primary hollow action-button",onClick:function(){b(!1),ee("create")()}},r.a.createElement("div",{className:"icon"},r.a.createElement(i.a,{name:"plus-circle"}))))),r.a.createElement("div",{className:"divider horizontal"}),r.a.createElement(d.l,{ref:J,showPath:!0,rootPath:"slideshows/",name:"Slideshows",resources:p,collections:v,resourceIcon:A,onClickItem:function(e){o(e)},isLoading:n})),rightDiv:r.a.createElement("div",null,r.a.createElement("div",{className:"page-header padded"},s&&Object.keys(s).length>0?r.a.createElement("div",{className:"full-width flex-row space-between"},r.a.createElement(d.j,{value:s.name,onChange:Q}),r.a.createElement("div",null,r.a.createElement(d.b,{onSave:ee("save"),onRemove:ee("remove"),onClose:ee("close")}))):r.a.createElement("div",null,"Get Started")),r.a.createElement("div",{className:"divider horizontal"}),r.a.createElement("div",null,M?r.a.createElement("div",{className:"auto-scroll-y",style:{position:"relative",height:"calc(100vh - 3rem)"}},r.a.createElement(d.a,{title:"Summary",isOpenDefault:!0},r.a.createElement("div",{className:"padded"},r.a.createElement("div",null,"Slides: ",X),r.a.createElement("br",null),r.a.createElement("div",null,"Tiles: ",Z," "),r.a.createElement("br",null),r.a.createElement("div",null,"Duration: ",$," "),r.a.createElement("br",null),r.a.createElement("button",{className:"primary hollow flex-row space-between",onClick:function(t){return function(){e.history.push("/app/slides/slideshows/edit/".concat(t.id))}}(s)},r.a.createElement("div",{style:{marginLeft:"0.6rem",marginRight:"0.6rem"}},r.a.createElement(i.a,{name:"pen"})),r.a.createElement("div",{style:{paddingRight:"0.6rem"}},"Edit")))),r.a.createElement("div",{className:"divider horizontal"}),r.a.createElement(d.a,{title:"Share",isOpenDefault:!0},r.a.createElement("div",{className:"padded flex-row"},[{name:"Preview",type:"preview",icon:"play"},{name:"PDF Export",type:"pdf",icon:"file-pdf"},{name:"Online Link",type:"online",icon:"globe"}].map((function(e,t){return r.a.createElement("div",{key:e},r.a.createElement("button",{className:"primary hollow flex-row",style:K,onClick:(n=e.type,function(){alert("format ".concat(n," not supported"))})},r.a.createElement("div",null,"  ",r.a.createElement(i.a,{name:e.icon})),r.a.createElement("div",null,"  ",e.name)));var n}))))):r.a.createElement(E,null)))}),r.a.createElement(u.a,{isOpen:j,activeModal:H,resourceName:"Schedule",onCancel:function(){T(!1),Y(null)},onAction:{save:function(){S.updateSlideshow(s.id,D({},s)).then((function(t){te(),e.addToast({type:"success",content:r.a.createElement("div",null,"Slideshow was successfully saved")})})).catch(y.a.handleError(e.addToast))},remove:function(){S.deleteSlideshow(s.id).then((function(t){te(),e.addToast({type:"success",content:r.a.createElement("div",null,"Slideshow was successfully deleted")})})).catch(y.a.handleError(e.addToast))},create:function(){var t={name:U,pages:[]};z&&(t.collectionId=z),S.createSlideshow(t).then((function(t){o({}),J.current.deselect(),te(),e.addToast({type:"success",content:r.a.createElement("div",null,"Slideshow was successfully created")})})).catch(y.a.handleError(e.addToast))}},views:{save:r.a.createElement("div",null,r.a.createElement("div",null,"Saving will override the existing Schedule."),r.a.createElement("br",null),r.a.createElement("div",null,"Are you sure?")),close:r.a.createElement("div",null,r.a.createElement("div",null,"Leaving now will discard all unsaved changes!"),r.a.createElement("br",null),r.a.createElement("div",null,"Are you sure you want to leave the Schedule?")),remove:r.a.createElement("div",null,r.a.createElement("div",null,"Deleting this Schedule cannot be undone!"),r.a.createElement("br",null),r.a.createElement("div",null,"Are you sure?")),create:r.a.createElement("div",{className:"flex-column"},r.a.createElement("input",{type:"text",defaultValue:U,onChange:Q,className:"full-width-padded",placeholder:"Slideshows name..."}),r.a.createElement("br",null),r.a.createElement("br",null),r.a.createElement("label",null,r.a.createElement("input",{type:"checkbox",checked:g,onChange:function(){return b(!g)}}),r.a.createElement("span",null,"Add to a ",r.a.createElement("strong",null," ",r.a.createElement(i.a,{name:"folder"}),"  Collection"))),g&&r.a.createElement("div",{style:{marginTop:"1rem"}},r.a.createElement("input",{type:"text",onChange:function(e){_(e.target.value)},className:"full-width-padded",placeholder:"Collections name..."}),r.a.createElement("br",null),r.a.createElement("br",null),"OR select a collection:",r.a.createElement("br",null),r.a.createElement("br",null),g&&r.a.createElement("div",null,v.map((function(e,t){return r.a.createElement("label",{key:e.id,className:"sidebar-collection",style:{color:"".concat(z===e.id?"#00adee":"initial")},onClick:B(t,e)},"  ",r.a.createElement(i.a,{name:"folder"}),"  ",e.name)})))))}}))};t.default=Object(s.b)((function(e){return{slideshows:e.session.slideshows,slideshow:e.session.slideshow}}),(function(e){return Object(o.b)({addToast:O.a,setVideoModal:O.d},e)}))(Object(c.g)(I))},1141:function(e,t,n){"use strict";var a=n(25),r=n.n(a),l=n(1143);function i(e,t,n,a,r,l,i){try{var c=e[l](i),s=c.value}catch(e){return void n(e)}c.done?t(s):Promise.resolve(s).then(a,r)}function c(e){return function(){var t=this,n=arguments;return new Promise((function(a,r){var l=e.apply(t,n);function c(e){i(l,a,r,c,s,"next",e)}function s(e){i(l,a,r,c,s,"throw",e)}c(void 0)}))}}console.log("HELLOOOO",{apiURL:"".concat(l.a.apiUrl.slides)});var s=function(){var e=c(regeneratorRuntime.mark((function e(t){var n,a;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return n=t.appName,a=t.resource,t.id,t.query,e.next=3,m("GET","".concat(l.a.apiUrl[n],"/").concat(n,"/").concat(a));case 3:return e.abrupt("return",e.sent);case 4:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}(),o=function(){var e=c(regeneratorRuntime.mark((function e(t){var n,a,r;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return n=t.appName,a=t.resource,r=t.data,e.next=3,m("POST","".concat(l.a.apiUrl[n],"/").concat(n,"/").concat(a),r);case 3:return e.abrupt("return",e.sent);case 4:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}(),u=function(){var e=c(regeneratorRuntime.mark((function e(t){var n,a,r,i;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return n=t.appName,a=t.resource,r=t.id,i=t.data,e.next=3,m("PATCH","".concat(l.a.apiUrl[n],"/").concat(n,"/").concat(a,"/").concat(r),i);case 3:return e.abrupt("return",e.sent);case 4:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}(),d=function(){var e=c(regeneratorRuntime.mark((function e(t){var n,a,r;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return n=t.appName,a=t.resource,r=t.id,e.next=3,m("DELETE","".concat(l.a.apiUrl[n],"/").concat(n,"/").concat(a,"/").concat(r));case 3:return e.abrupt("return",e.sent);case 4:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}(),m=function(){var e=c(regeneratorRuntime.mark((function e(t,n,a){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,e.next=3,r()({url:n,method:t,data:a});case 3:return e.abrupt("return",e.sent);case 6:e.prev=6,e.t0=e.catch(0),console.warn("ERROR: ".concat(err));case 9:case"end":return e.stop()}}),e,null,[[0,6]])})));return function(t,n,a){return e.apply(this,arguments)}}();t.a={POSTResource:o,PATCHResource:u,GETResource:s,DELETEResource:d,handleError:function(e){return function(t){e({type:"error",message:t})}}}},1143:function(e,t,n){"use strict";(function(e){var a=n(1097),r=n(47),l=e.env,i=e.pid,c=l.port||8005;e.env.CSC_IDENTITY_AUTO_DISCOVERY=!1;"http://localhost:".concat(c);var s="https://studio.vis-ion.io",o={development:{identity:"http://localhost:".concat(3e3,"/api"),slides:"http://localhost:".concat(3010,"/api"),schools:"http://localhost:".concat(3020,"/api")},sandbox:{identity:"http://locahost:8005/api/identity",slides:"http://locahost:8005/api/slides",schools:"http://localhost:8005/api/schools"}},u={appName:r.name,version:r.version,appUrl:s,apiUrl:o.production,environment:"production",port:c,pid:i,platform:a.platform()};console.log(u),t.a=u}).call(this,n(24))},1160:function(e,t,n){e.exports=n.p+"assets/images/slideshows_create.gif"},1161:function(e,t,n){e.exports=n.p+"assets/images/slides_edit.gif"}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,