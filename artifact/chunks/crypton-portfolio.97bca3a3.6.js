(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{1122:function(e,t,r){"use strict";r.r(t),r.d(t,"CryptonPortfolio",(function(){return j}));var n=r(0),a=r.n(n),o=(r(6),r(5)),c=r(67),i=r(35),s=r(9),l=r(83),u=r(1142);function f(e){return(f="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function d(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function p(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?d(Object(r),!0).forEach((function(t){y(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):d(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function y(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function b(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function m(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function v(e,t){return!t||"object"!==f(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function h(e){return(h=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function w(e,t){return(w=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var O=[{id:"bitcoin",value:.03943},{id:"ethereum",value:3.98},{id:"funds",value:22}],g=[{name:"AggroBot",description:"Trades aggressively"},{name:"ThrobbingHood",description:"Makes painful decisions"}],E=[{id:0,type:"Trade",value:100,asset:"bitcoin"},{id:1,type:"Trade",value:-10,asset:"bitcoin"},{id:2,type:"Trade",value:-13,asset:"eth"},{id:3,type:"Trade",value:50,asset:"eth"},{id:4,type:"Trade",value:20,asset:"eth"},{id:5,type:"Trade",value:-50,asset:"bitcoin"},{id:6,type:"Trade",value:10,asset:"bitcoin"}],j=function(e){function t(){var e,r,n;b(this,t);for(var a=arguments.length,o=new Array(a),c=0;c<a;c++)o[c]=arguments[c];return v(n,(r=n=v(this,(e=h(t)).call.apply(e,[this].concat(o))),n.state={activeTab:"assets",currency:"usd",viewType:"tile",isLoading:{strategies:!0},data:{assets:[],bots:[],transactions:[]}},r))}var r,n,o;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&w(e,t)}(t,e),r=t,(n=[{key:"componentDidMount",value:function(){console.log(this.state.data);var e=this.props.history.location.search,t=Object(l.a)(e);this.setState({tab:t.tab})}},{key:"render",value:function(){var e=this.state,t=(e.data,e.activeTab),r={margin:"0.5rem",backgroundColor:"rgba(128,128,128, 0.2)"};return a.a.createElement("div",{className:"page dark"},a.a.createElement("div",null,a.a.createElement("div",{className:"page-header padded"},a.a.createElement("h3",null,"Portfolio")),a.a.createElement("br",null),a.a.createElement(s.w,{defaultTab:t,keys:["assets","bots","transactions"],assets:a.a.createElement("div",null,a.a.createElement("div",{className:"flex-row flex-wrap"},(O||[]).map((function(e,t){return a.a.createElement("div",{key:t,className:"card card-1",style:p({},r,{width:"20rem",height:"12rem"})},a.a.createElement("div",null,e.id),a.a.createElement("div",null,e.value))})))),bots:a.a.createElement("div",null,a.a.createElement("div",{className:"flex-row flex-wrap"},(g||[]).map((function(e,t){return a.a.createElement("div",{key:t,className:"card card-1",style:p({},r,{width:"20rem",height:"12rem"})},a.a.createElement("div",null,e.name),a.a.createElement("div",null,e.description))})))),transactions:a.a.createElement("div",null,a.a.createElement("div",{className:"flex-row flex-wrap"},(E||[]).map((function(e,t){return a.a.createElement("div",{key:t,className:"card card-1 flex-row",style:p({},r,{width:"calc(100% - 2rem)",margin:"auto",marginBottom:"0.5rem",height:"3rem",textAlign:"left"})},a.a.createElement("div",{style:{flexGrow:1}},e.id),a.a.createElement("div",{style:{flexGrow:1}},e.type),a.a.createElement("div",{style:{flexGrow:1}},e.value),a.a.createElement("div",{style:{flexGrow:1}},e.asset))}))))})))}}])&&m(r.prototype,n),o&&m(r,o),t}(n.Component);t.default=Object(c.b)((function(e){return{coins:e.crypton.coins}}),(function(e){return Object(i.b)({fetchAssets:u.a,fetchTransactions:u.c,fetchBots:u.b,setCoin:u.d},e)}))(Object(o.g)(j))},1142:function(e,t,r){"use strict";r.d(t,"d",(function(){return o})),r.d(t,"a",(function(){return c})),r.d(t,"b",(function(){return i})),r.d(t,"c",(function(){return s}));var n=r(519),a=r(243),o=function(e){return function(t){t({payload:e,type:a.e})}},c=function(e){return function(e){return Object(n.a)({resourceName:"crypton/assets",actionType:a.a})}},i=function(e){return function(e){return Object(n.a)({resourceName:"crypton/assets",actionType:a.b})}},s=function(e){return function(e){return Object(n.a)({resourceName:"crypton/assets",actionType:a.d})}}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,