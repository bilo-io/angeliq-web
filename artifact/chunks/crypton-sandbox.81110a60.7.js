(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{1120:function(t,e,n){"use strict";n.r(e),n.d(e,"CryptonSandbox",(function(){return v}));var a=n(0),o=n.n(a),r=(n(6),n(67),n(35),n(9)),c=(n(1144),n(240),n(172)),i=n(1145),l=n(1150);function s(t){return(s="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function u(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,a)}return n}function d(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?u(Object(n),!0).forEach((function(e){f(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):u(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function f(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function p(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function y(t,e){for(var n=0;n<e.length;n++){var a=e[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(t,a.key,a)}}function b(t,e){return!e||"object"!==s(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function g(t){return(g=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function h(t,e){return(h=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}var v=function(t){function e(){var t,n,a;p(this,e);for(var o=arguments.length,r=new Array(o),i=0;i<o;i++)r[i]=arguments[i];return b(a,(n=a=b(this,(t=g(e)).call.apply(t,[this].concat(r))),a.state={isLoading:{ipAddress:!0,countryForIP:!0,cryptoInfo:!0,cryptoIndex:!0,chartData:!0,cryptoCoins:!0},data:{}},a.setChartType=function(t){a.setState({chartType:t.target.value})},a.fetchLocationInfo=function(){Object(c.b)().then((function(t){var e=t.ip;a.setState({data:d({},a.state.data,{ipAddress:e})}),Object(c.a)(e).then((function(t){console.log(t),a.setState({data:d({},a.state.data,{country:t,currency:Object(l.a)(null==t?void 0:t.countryCode)})})})).catch((function(t){console.log(t)})).finally((function(){a.setState({isLoading:d({},a.state.isLoading,{countryForIP:!1})})}))})).catch((function(t){console.log(t)})).finally((function(){a.setState({isLoading:d({},a.state.isLoading,{ipAddress:!1})})}))},a.onChange=function(t){},n))}var n,a,s;return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&h(t,e)}(e,t),n=e,(a=[{key:"componentDidMount",value:function(){this.fetchLocationInfo(),this.fetchCryptoInfo()}},{key:"fetchCryptoInfo",value:function(){var t=this;Object(i.d)().then((function(e){t.setState({data:d({},t.state.data,{cryptoExchanges:e})})})).finally((function(){t.setState({isLoading:d({},t.state.isLoading,{cryptoExchanges:!1})})})),Object(i.e)().then((function(e){t.setState({data:d({},t.state.data,{cryptoGlobal:e})})})).finally((function(){t.setState({isLoading:d({},t.state.isLoading,{cryptoGlobal:!1})})})),Object(i.f)().then((function(e){t.setState({data:d({},t.state.data,{cryptoTrending:e})})})).finally((function(){t.setState({isLoading:d({},t.state.isLoading,{cryptoTrending:!1})})})),Object(i.c)().then((function(e){t.setState({data:d({},t.state.data,{cryptoExchangeRates:e})})})).finally((function(){t.setState({isLoading:d({},t.state.isLoading,{cryptoExchangeRates:!1})})})),Object(i.a)({id:"bitcoin",currency:"usd",days:7}).then((function(e){t.setState({data:d({},t.state.data,{chartData:e})})})).finally((function(){t.setState({isLoading:d({},t.state.isLoading,{chartData:!1})})}))}},{key:"render",value:function(){var t,e,n,a,c,i,l,s=this.state,u=s.isLoading,f=s.data,p=f&&(null===(t=f.cryptoExchangeRates)||void 0===t?void 0:t.rates)?Object.keys(null==f?void 0:f.cryptoExchangeRates.rates):[],y=p.map((function(t){return d({id:t,key:t},null==f?void 0:f.cryptoExchangeRates.rates[t])})),b=f.currency;return console.log({keys:p,items:y}),(null==f?void 0:null===(e=f.chartData)||void 0===e?void 0:null===(n=e.prices)||void 0===n?void 0:n.length)>0&&f.chartData.prices.map((function(t){return[new Date(t[0]),t[1]]})),null==f||null===(a=f.chartData)||void 0===a||a.prices,o.a.createElement("div",{className:"page"},o.a.createElement("div",null,o.a.createElement("h1",null,"Crypton Sandbox"),o.a.createElement(r.c,{isLoading:u.ipAddress},o.a.createElement("div",{className:"card card-1 flex-row space-between",style:{padding:"1rem",borderRadius:"6px",border:"1px solid rgba(grey, 0.5)"}},o.a.createElement("div",null,"IP: ",o.a.createElement("strong",null,f.ipAddress)),o.a.createElement(r.c,{isLoading:u.country},o.a.createElement("div",{className:"flex-row space-between"},o.a.createElement("div",null,null===(c=f.country)||void 0===c?void 0:c.countryName),o.a.createElement("div",null,"(",null===(i=f.country)||void 0===i?void 0:i.countryCode,")"),o.a.createElement("div",null,b),o.a.createElement("div",null,null===(l=f.country)||void 0===l?void 0:l.countryEmoji))))),o.a.createElement(r.c,{isLoading:u.cryptoExchanges},o.a.createElement("div",null,"CryptoExchanges: ",o.a.createElement("strong",null,o.a.createElement("pre",null))),o.a.createElement("div",{className:"flex-row flex-wrap"},!1))))}}])&&y(n.prototype,a),s&&y(n,s),e}(a.Component);e.default=v}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,